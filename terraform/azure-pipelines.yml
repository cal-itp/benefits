trigger:
  # automatically runs on pull requests
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-devops&tabs=yaml#pr-triggers
  branches:
    include:
      - main
      - refs/tags/20??.??.?*-rc?*
      - refs/tags/20??.??.?*
  # only run for changes to Terraform files
  paths:
    include:
      - terraform/*
stages:
  - stage: terraform
    pool:
      vmImage: ubuntu-latest
    jobs:
      # the service connection name must be hard-coded, so the workaround to make it dynamic is to use multiple jobs with conditions
      # https://stackoverflow.com/a/57520153/358804
      # https://developercommunity.visualstudio.com/t/using-a-variable-for-the-service-connection-result/676259#T-N1183768
      - job: environment
        variables:
          - name: OTHER_SOURCE
            value: $[variables['System.PullRequest.SourceBranch']]
          - name: INDIVIDUAL_SOURCE
            value: $[variables['Build.SourceBranchName']]
          - name: TARGET
            value: $[variables['System.PullRequest.TargetBranch']]
          - name: IS_TAG
            value: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
        steps:
          - bash: python terraform/pipeline/workspace.py
            displayName: Set environment-related variables
            # save the values
            # https://learn.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#use-outputs-in-a-different-job
            name: env_select
            env:
              REASON: $(Build.Reason)
      - job: dev
        dependsOn: environment
        condition: eq(dependencies.environment.outputs['env_select.service_connection'], 'Development')
        variables:
          workspace: $[ dependencies.environment.outputs['env_select.workspace'] ]
        steps:
          - template: pipeline/deploy.yml
            parameters:
              service_connection: Development
              workspace: $(workspace)
      - job: prod
        dependsOn: environment
        condition: eq(dependencies.environment.outputs['env_select.service_connection'], 'Production')
        variables:
          workspace: $[ dependencies.environment.outputs['env_select.workspace'] ]
        steps:
          - template: pipeline/deploy.yml
            parameters:
              service_connection: Production
              workspace: $(workspace)
