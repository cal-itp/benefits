{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project overview","text":"<p>This website provides technical documentation for the <code>benefits</code> application from the California Integrated Travel Project (Cal-ITP).</p> <p></p> <p>Cal-ITP Benefits is a web application that enables digital eligibility verification and enrollment for transit benefits onto transit riders\u2019 existing contactless debit and credit cards.</p> <p>The development of this publicly-accessible client is being managed by Caltrans\u2019 California Integrated Travel Project (Cal-ITP), in partnership with the California Department of Technology (CDT). From the Cal-ITP site:</p> <p>Our Cal-ITP Benefits web application streamlines the process for transit riders to instantly qualify for and receive discounts, starting with Monterey-Salinas Transit (MST), which offers a half-price Senior Fare. Now older adults (65+) who are able to electronically verify their identity are able to access MST\u2019s reduced fares without the hassle of paperwork.</p> <p>We worked with state partners on this product launch, and next we\u2019re working to bring youth, lower-income riders, veterans, people with disabilities, and others the same instant access to free or reduced fares across all California transit providers, without having to prove eligibility to each agency.</p> <p>Cal-ITP Benefits is open-source software that is designed, developed, and maintained by Compiler LLC on behalf of Caltrans, Cal-ITP, and our agency partners.</p>"},{"location":"#adoption-by-transit-providers","title":"Adoption by transit providers","text":"<p>The following California transit providers have adopted Cal-ITP Benefits. The benefit options available to eligible riders are denoted by a green checkmark.</p> Transit provider Initial launch date Older adults Medicare cardholders U.S. Veterans Agency card Low-income Monterey-Salinas Transit 12/2021 \u2705 \u2705 \u2705 \u2705 \u2015 Santa Barbara Metropolitan Transit District 10/2023 \u2705 \u2705 \u2015 \u2705 \u2015 Sacramento Regional Transit District 10/2024 \u2705 \u2705 \u2705 \u2015 \u2015 Nevada County Connects 03/2025 \u2705 \u2705 \u2705 \u2015 \u2015 Ventura County Transportation Commission 10/2025 \u2705 \u2705 \u2015 \u2015 \u2015 El Dorado Transit Authority 11/2025 (target) * * * * * Redding Area Bus Authority 11/2025 (target) * * * * * San Luis Obispo Regional Transit 02/2026 (target) * * * * * City of Roseville Planned * * * * * Santa Cruz Metropolitan Transit District Planned * * * * *"},{"location":"#supported-enrollment-pathways","title":"Supported enrollment pathways","text":"<p>The Cal-ITP Benefits app supports the following enrollment pathways that use the corresponding eligibility verification methods:</p> Enrollment pathway Eligibility verification Status Launch Older adults Login.gov ID Proofed Live 08/2022 Agency cards Eligibility API Live 11/2022 Veterans Veteran Confirmation API Live 09/2023 Low-income CalFresh Confirm API Live 07/2024 Medicare cardholders Blue Button API Live 09/2024 <p>Read more about each enrollment pathway.</p>"},{"location":"#technical-and-security-details","title":"Technical and security details","text":"<p><code>benefits</code> is a Django 5 web application. The application talks to one or more Eligibility Verification APIs or claims providers. These APIs and the application itself are designed for privacy and security of user information:</p> <ul> <li>The API communicates with signed and encrypted JSON Web Tokens containing only the most necessary of user data for the purpose of eligibility verification</li> <li>The application requires no user accounts and stores no information about the user</li> <li>Interaction with the application is anonymous, with only minimal event tracking for usage and problem analysis</li> </ul> <p>Running the application locally is possible with Docker and Docker Compose. Hosting information.</p> <p>The user interface and content is available in both English and Spanish. Additional language support is possible via Django\u2019s i18n and l10n features.</p> <p>The application communicates with external transit processor vendors via API calls and others like the Identity Gateway via redirects, both over the public internet. See all the system interconnections.</p>"},{"location":"#infrastructure","title":"Infrastructure","text":"<p>The Benefits application is deployed to Microsoft Azure. Traffic is encrypted between the user and the application, as well as between the application and external systems.</p> <p>The network is managed by the California Department of Technology (CDT), who provide a firewall and distributed denial-of-service (DDoS) protection.</p> <p>You can find more technical details on our infrastructure page.</p>"},{"location":"#data-storage","title":"Data storage","text":"<p>The Benefits application doesn\u2019t collect or store any user data directly, and we minimize the information exchanged between systems. The following information is temporarily stored in an encrypted session in the user\u2019s browser:</p> <ul> <li>The user\u2019s progress through an enrollment pathway</li> <li>Credentials for interacting with the eligibility verification services</li> </ul> <p>Sensitive user information exists in the following places:</p> <ul> <li>To enroll for reduced fares as an older adult, U.S. Veteran, or Calfresh cardholder, riders need to provide personal information to Login.gov.</li> <li>To enroll for reduced fares as a Medicare cardholder, riders need to provide personal information to Medicare.gov.</li> <li>Eligible riders need to provide their contactless credit or debit card information to one of our transit processors, to register their card for reduced fares.</li> </ul> <p>None of that information is accessible to the Benefits system/team.</p> <p>Learn more about the security/privacy practices of some of our third-party integrations:</p> <ul> <li>Amplitude</li> <li>Littlepay</li> <li>Switchio</li> <li>Login.gov</li> </ul> <p>Benefits collects analytics on usage, without any identifying information. You can find more details on our analytics page.</p>"},{"location":"#transit-processors","title":"Transit processors","text":"<p>The Benefits application integrates with transit processors to securely register credit or debit cards. This application currently supports the following transit processors:</p> <ul> <li>Littlepay</li> <li>Switchio</li> </ul>"},{"location":"#practices","title":"Practices","text":"<p>Dependabot immediately notifies the team of vulnerabilities in application dependencies.</p> <p>Upon doing new major integrations, features, or architectural changes, the Benefits team has a penetration test performed by a third party to ensure the security of the system.</p> <p>All code changes are reviewed by at least one other member of the engineering team, which is enforced through branch protections.</p>"},{"location":"configuration/","title":"Configuring the Benefits app","text":"<p>The Getting Started section and sample configuration values in the repository give enough detail to run the app locally, but further configuration is required before many of the integrations and features are active.</p> <p>There are two primary components of the application configuration:</p> <ul> <li>Overall app settings in environment variables</li> <li>Content and more specific configurations in the data migration file</li> </ul> <p>Many (but not all) of the environment variables are read into Django settings during application startup.</p> <p>The model objects defined in the data migration file are also loaded into and seed Django\u2019s database at application startup time.</p> <p>See the Setting secrets section for how to set secret values for a deployment.</p>"},{"location":"configuration/#django-settings","title":"Django settings","text":"<p>Settings file</p> <p><code>benefits/settings.py</code></p> <p>Django docs</p> <p>Django settings</p> <p>The Django entrypoint for production runs is defined in <code>benefits/wsgi.py</code>.</p> <p>This file names the module that tells Django which settings file to use:</p> <pre><code>import os\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"benefits.settings\")\n</code></pre> <p>Elsewhere, e.g. in <code>manage.py</code>, this same environment variable is set to ensure <code>benefits.settings</code> are loaded for every app command and run.</p>"},{"location":"configuration/#using-configuration-in-app-code","title":"Using configuration in app code","text":"<p>Django docs</p> <p>Using settings in Python code</p> <p>From within the application, the Django settings object and the Django models are the two interfaces for application code to read configuration data.</p> <p>Rather than importing the app\u2019s settings module, Django recommends importing the <code>django.conf.settings</code> object, which provides an abstraction and better handles default values:</p> <pre><code>from django.config import settings\n\n# ...\n\nif settings.DEBUG:\n    # do something when debug is enabled\nelse:\n    # do something else when debug is disabled\n</code></pre> <p>Through the Django model framework, <code>benefits.core.models</code> instances are used to access the configuration data:</p> <pre><code>from benefits.core.models import TransitAgency\n\nagency = TransitAgency.objects.get(short_name=\"ABC\")\n\nif agency.active:\n    # do something when this agency is active\nelse:\n    # do something when this agency is inactive\n</code></pre>"},{"location":"configuration/admin-interface/","title":"Admin interface","text":"<p>Django docs</p> <p>The Django admin site</p> <p>The configuration values that can be stored in the application database are managed directly in the Django Admin interface at the <code>/admin</code> endpoint.</p> <p>Single sign-on authentication is supported by the admin interface using <code>django-google-sso</code>.</p>"},{"location":"configuration/admin-interface/#environment-variables","title":"Environment variables","text":"<p><code>django-google-sso</code> docs</p> <p>All settings for <code>django-google-sso</code></p> <p><code>settings.py</code></p> <p>Configuration of <code>django-google-sso</code> in Benefits settings</p> <p>These environment variables must be set in your <code>.env</code> file to use the admin interface locally:</p>"},{"location":"configuration/admin-interface/#google_sso_client_id","title":"GOOGLE_SSO_CLIENT_ID","text":"<p>The Google OAuth 2.0 Web Application Client ID.</p>"},{"location":"configuration/admin-interface/#google_sso_project_id","title":"GOOGLE_SSO_PROJECT_ID","text":"<p>The Google OAuth 2.0 Project ID.</p>"},{"location":"configuration/admin-interface/#google_sso_client_secret","title":"GOOGLE_SSO_CLIENT_SECRET","text":"<p>The Google OAuth 2.0 Web Application Client Secret.</p>"},{"location":"configuration/admin-interface/#google_sso_allowable_domains","title":"GOOGLE_SSO_ALLOWABLE_DOMAINS","text":"<p>List of domains that will be allowed to create users.</p>"},{"location":"configuration/admin-interface/#google_sso_staff_list","title":"GOOGLE_SSO_STAFF_LIST","text":"<p>List of emails that will be created as staff.</p> <p>\u201cStaff\u201d refers to Django\u2019s concept of a user with <code>is_staff</code> set to <code>True</code>, which means they can log in, and also to the Cal-ITP Benefits concept of a user who should have a \u201cCal-ITP staff\u201d level of access to configuration values.</p>"},{"location":"configuration/admin-interface/#google_sso_superuser_list","title":"GOOGLE_SSO_SUPERUSER_LIST","text":"<p>List of emails that will be created as superuser.</p>"},{"location":"configuration/admin-interface/#to-add-a-new-user","title":"To add a new user:","text":"<ul> <li>Add the user\u2019s email to either <code>GOOGLE_SSO_STAFF_LIST</code> or <code>GOOGLE_SSO_SUPERUSER_LIST</code> depending on what permissions they should have.<ul> <li>The email must be from a domain that is in the <code>GOOGLE_SSO_ALLOWABLE_DOMAINS</code> list.</li> </ul> </li> <li>Restart the Benefits application so that Django settings are re-loaded.</li> <li>Have the user log in to the admin interface with their Google account.</li> </ul>"},{"location":"configuration/content-security-policy/","title":"Configuring the Content Security Policy","text":"<p>MDN docs</p> <p>The Mozilla Developer Network has more on Content Security Policy</p> <p>The HTTP <code>Content-Security-Policy</code> response header allows web site administrators to control resources the user agent is allowed to load for a given page.</p> <p>With a few exceptions, policies mostly involve specifying server origins and script endpoints. This helps guard against cross-site scripting attacks</p> <p>Strict CSP</p> <p>Benefits configures a Strict Content Security Policy. Read more about Strict CSP from Google: https://csp.withgoogle.com/docs/strict-csp.html.</p>"},{"location":"configuration/content-security-policy/#django-csp","title":"<code>django-csp</code>","text":"<p>django-csp docs</p> <p>Configuring <code>django-csp</code></p> <p>Benefits uses the open source <code>django-csp</code> library for helping to configure the correct response headers.</p>"},{"location":"configuration/content-security-policy/#environment-variables","title":"Environment Variables","text":""},{"location":"configuration/content-security-policy/#django_csp_connect_src","title":"<code>DJANGO_CSP_CONNECT_SRC</code>","text":"<p>Comma-separated list of URIs. Configures the <code>connect-src</code> Content Security Policy directive.</p>"},{"location":"configuration/content-security-policy/#django_csp_font_src","title":"<code>DJANGO_CSP_FONT_SRC</code>","text":"<p>Comma-separated list of URIs. Configures the <code>font-src</code> Content Security Policy directive.</p>"},{"location":"configuration/content-security-policy/#django_csp_frame_src","title":"<code>DJANGO_CSP_FRAME_SRC</code>","text":"<p>Comma-separated list of URIs. Configures the <code>frame-src</code> Content Security Policy directive.</p>"},{"location":"configuration/content-security-policy/#django_csp_script_src","title":"<code>DJANGO_CSP_SCRIPT_SRC</code>","text":"<p>Comma-separated list of URIs. Configures the <code>script-src</code> Content Security Policy directive.</p>"},{"location":"configuration/content-security-policy/#django_csp_style_src","title":"<code>DJANGO_CSP_STYLE_SRC</code>","text":"<p>Comma-separated list of URIs. Configures the <code>style-src</code> Content Security Policy directive.</p>"},{"location":"configuration/data/","title":"Configuration data","text":"<p>Sample data fixtures</p> <p><code>benefits/core/migrations/local_fixtures.json</code></p> <p>Django docs</p> <p>How to provide initial data for models</p>"},{"location":"configuration/data/#introduction","title":"Introduction","text":"<p>The app\u2019s model classes are defined in <code>benefits/core/models.py</code>.</p> <p>Migrations are run as the application starts up. See the <code>bin/init.sh</code> script.</p> <p>The sample values provided in the repository are sufficient to run the app locally and interact with e.g. the sample Transit Agencies. Django fixtures are used to load the database with sample data when running locally.</p> <p>During the deployment process, some environment-specific values are set in environment variables and read dynamically at runtime. Most configuration values are managed directly in the Django Admin interface at the <code>/admin</code> endpoint.</p>"},{"location":"configuration/data/#sample-data","title":"Sample data","text":"<p>The sample data included in the repository is enough to bootstrap the application with basic functionality:</p> <ul> <li>Multiple transit agency configurations</li> <li>Multiple eligibility verification pathways</li> <li>With and without authentication required before eligibility verification</li> <li>In concert with the sample eligibility server, verification with test user data</li> </ul>"},{"location":"configuration/data/#not-included","title":"Not included","text":"<p>Some configuration data is not available with the samples in the repository:</p> <ul> <li>OAuth configuration to enable authentication (read more about OAuth configuration)</li> <li>reCAPTCHA configuration for user-submitted forms</li> <li>Transit processor configuration for the enrollment phase</li> <li>Amplitude configuration for capturing analytics events</li> </ul> <p>Compiler developers, instead of setting these manually, you can load some of them with a private fixtures file that we maintain:</p> <ol> <li>Grab the \u201cBenefits fixtures with secrets for local development\u201d note from our shared notes in LastPass</li> <li>Put it in a new JSON file named something like <code>dev_fixtures.json</code></li> <li>Change the value of <code>DJANGO_DB_FIXTURES</code> in your <code>.env</code> file to point to your new <code>dev_fixtures.json</code></li> <li>Rebuild the devcontainer</li> </ol>"},{"location":"configuration/data/#rebuilding-the-configuration-database-locally","title":"Rebuilding the configuration database locally","text":"<p>A local Django database will be initialized upon first startup of the devcontainer.</p> <p>To rebuild the local Django database, run the <code>bin/reset_db.sh</code> script from within the repository root, inside the devcontainer:</p> <pre><code>bin/reset_db.sh\n</code></pre> <p>See the Django Environment Variables section for details about how to configure the local database rebuild.</p>"},{"location":"configuration/environment-variables/","title":"Environment variables","text":"<p>The first steps of the Getting Started guide mention creating an <code>.env</code> file.</p> <p>The sections below outline in more detail the application environment variables that you may want to override, and their purpose. In Azure App Services, this is more generally called the \u201cconfiguration\u201d.</p> <p>See other topic pages in this section for more specific environment variable configurations.</p> <p>Multiline environment variables</p> <p>Although Docker, bash, etc. support multiline values directly in e.g. an .env file:</p> <pre><code>multi_line_value='first line\nsecond line\nthird line'\n</code></pre> <p>The VS Code Python extension does not parse multiline values: https://code.visualstudio.com/docs/python/environments#_environment-variables</p> <p>When specifying multiline values for local usage, use the literal newline character <code>\\n</code> but maintain the single quote wrapper:</p> <pre><code>multi_line_value='first line\\nsecond line\\third line'\n</code></pre> <p>A quick bash script to convert direct multiline values to their literal newline character equivalent is:</p> <pre><code>echo \"${multi_line_value//$'\\n'/\\\\n}\"\n</code></pre>"},{"location":"configuration/environment-variables/#amplitude","title":"Amplitude","text":"<p>Amplitude API docs</p> <p>Read more at https://developers.amplitude.com/docs/http-api-v2#request-format</p>"},{"location":"configuration/environment-variables/#analytics_key","title":"<code>ANALYTICS_KEY</code>","text":"<p>Deployment configuration</p> <p>You may change this setting when deploying the app to a non-localhost domain</p> <p>Amplitude API key for the project where the app will direct events.</p> <p>If blank or an invalid key, analytics events aren\u2019t captured (though may still be logged).</p>"},{"location":"configuration/environment-variables/#django","title":"Django","text":""},{"location":"configuration/environment-variables/#django_allowed_hosts","title":"<code>DJANGO_ALLOWED_HOSTS</code>","text":"<p>Deployment configuration</p> <p>You must change this setting when deploying the app to a non-localhost domain</p> <p>Django docs</p> <p>Settings: <code>ALLOWS_HOSTS</code></p> <p>A list of strings representing the host/domain names that this Django site can serve.</p>"},{"location":"configuration/environment-variables/#django_storage_dir","title":"<code>DJANGO_STORAGE_DIR</code>","text":"<p>Deployment configuration</p> <p>You may change this setting when deploying the app to a non-localhost domain</p> <p>The directory where Django creates its SQLite database file and where it creates the <code>uploads</code> folder for file uploads. Must exist and be writable by the Django process.</p> <p>By default, the base project directory (i.e. the root of the repository).</p>"},{"location":"configuration/environment-variables/#django_db_file","title":"<code>DJANGO_DB_FILE</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>The name of the Django database file to use locally (during both normal app startup and for resetting the database).</p> <p>By default, <code>django.db</code>.</p>"},{"location":"configuration/environment-variables/#django_db_fixtures","title":"<code>DJANGO_DB_FIXTURES</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>A path, relative to the repository root, of Django data fixtures to load when resetting the database.</p> <p>The file must end in <code>fixtures.json</code> for the script to process it correctly.</p> <p>By default, <code>benefits/core/migrations/local_fixtures.json</code>.</p>"},{"location":"configuration/environment-variables/#django_db_reset","title":"<code>DJANGO_DB_RESET</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>Boolean:</p> <ul> <li><code>True</code> (default): deletes the existing database file and runs fresh Django migrations.</li> <li><code>False</code>: Django uses the existing database file.   (Note: Fixtures will still be loaded, updating any values on those objects if they have changed.)</li> </ul>"},{"location":"configuration/environment-variables/#django_debug","title":"<code>DJANGO_DEBUG</code>","text":"<p>Deployment configuration</p> <p>Do not enable this in production</p> <p>Django docs</p> <p>Settings: <code>DEBUG</code></p> <p>Boolean:</p> <ul> <li><code>True</code>: the application is launched with debug mode turned on, allows pausing on breakpoints in the code, changes how static   files are served</li> <li><code>False</code> (default): the application is launched with debug mode turned off, similar to how it runs in production</li> </ul>"},{"location":"configuration/environment-variables/#django_local_port","title":"<code>DJANGO_LOCAL_PORT</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>The port used to serve the Django application from the host machine (that is running the application container).</p> <p>i.e. if you are running the app in Docker on your local machine, this is the port that the app will be accessible from at http://localhost:$DJANGO_LOCAL_PORT</p> <p>From inside the container, the app is always listening on port <code>8000</code>.</p>"},{"location":"configuration/environment-variables/#django_log_level","title":"<code>DJANGO_LOG_LEVEL</code>","text":"<p>Deployment configuration</p> <p>You may change this setting when deploying the app to a non-localhost domain</p> <p>Django docs</p> <p>Settings: <code>LOGGING</code></p> <p>The log level used in the application\u2019s logging configuration. Defaults to <code>DEBUG</code> when Django is running in debug mode and <code>WARNING</code> otherwise.</p> <p>By default the application sends logs to <code>stdout</code>.</p>"},{"location":"configuration/environment-variables/#django_secret_key","title":"<code>DJANGO_SECRET_KEY</code>","text":"<p>Deployment configuration</p> <p>You must change this setting when deploying the app to a non-localhost domain</p> <p>Django docs</p> <p>Settings: <code>SECRET_KEY</code></p> <p>Django\u2019s primary secret, keep this safe!</p>"},{"location":"configuration/environment-variables/#django_superuser_email","title":"<code>DJANGO_SUPERUSER_EMAIL</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>The email address of the Django Admin superuser created when resetting the database.</p>"},{"location":"configuration/environment-variables/#django_superuser_password","title":"<code>DJANGO_SUPERUSER_PASSWORD</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>The password of the Django Admin superuser created when resetting the database.</p>"},{"location":"configuration/environment-variables/#django_superuser_username","title":"<code>DJANGO_SUPERUSER_USERNAME</code>","text":"<p>Local configuration</p> <p>This setting only affects the app running on localhost</p> <p>The username of the Django Admin superuser created when resetting the database.</p>"},{"location":"configuration/environment-variables/#django_trusted_origins","title":"<code>DJANGO_TRUSTED_ORIGINS</code>","text":"<p>Deployment configuration</p> <p>You must change this setting when deploying the app to a non-localhost domain</p> <p>Django docs</p> <p>Settings: <code>CSRF_TRUSTED_ORIGINS</code></p> <p>Comma-separated list of hosts which are trusted origins for unsafe requests (e.g. POST)</p>"},{"location":"configuration/environment-variables/#healthcheck_user_agents","title":"<code>HEALTHCHECK_USER_AGENTS</code>","text":"<p>Deployment configuration</p> <p>You must change this setting when deploying the app to a non-localhost domain</p> <p>Comma-separated list of User-Agent strings which, when present as an HTTP header, should only receive healthcheck responses. Used by our <code>HealthcheckUserAgents</code> middleware.</p>"},{"location":"configuration/environment-variables/#requests-configuration","title":"<code>requests</code> configuration","text":"<p><code>requests</code> docs</p> <p>Docs for timeouts</p>"},{"location":"configuration/environment-variables/#requests_connect_timeout","title":"<code>REQUESTS_CONNECT_TIMEOUT</code>","text":"<p>The number of seconds <code>requests</code> will wait for the client to establish a connection to a remote machine. Defaults to 3 seconds.</p>"},{"location":"configuration/environment-variables/#requests_read_timeout","title":"<code>REQUESTS_READ_TIMEOUT</code>","text":"<p>The number of seconds the client will wait for the server to send a response. Defaults to 1 second.</p>"},{"location":"configuration/environment-variables/#sentry","title":"Sentry","text":""},{"location":"configuration/environment-variables/#sentry_dsn","title":"<code>SENTRY_DSN</code>","text":"<p>Sentry docs</p> <p>Data Source Name (DSN)</p> <p>Enables sending events to Sentry.</p>"},{"location":"configuration/environment-variables/#sentry_environment","title":"<code>SENTRY_ENVIRONMENT</code>","text":"<p>Sentry docs</p> <p><code>environment</code> config value</p> <p>Segments errors by which deployment they occur in. This defaults to <code>dev</code>, and can be set to match one of the environment names.</p> <p><code>local</code> may also be used for local testing of the Sentry integration.</p>"},{"location":"configuration/environment-variables/#sentry_report_uri","title":"<code>SENTRY_REPORT_URI</code>","text":"<p>Sentry docs</p> <p>Security Policy Reporting</p> <p>Collect information on Content-Security-Policy (CSP) violations. Read more about CSP configuration in Benefits.</p> <p>To enable report collection, set this env var to the authenticated Sentry endpoint.</p>"},{"location":"configuration/environment-variables/#sentry_traces_sample_rate","title":"<code>SENTRY_TRACES_SAMPLE_RATE</code>","text":"<p>Sentry docs</p> <p><code>traces_sample_rate</code></p> <p>Control the volume of transactions sent to Sentry. Value must be a float in the range <code>[0.0, 1.0]</code>.</p> <p>The default is <code>0.0</code> (i.e. no transactions are tracked).</p>"},{"location":"configuration/oauth/","title":"OAuth settings","text":"<p>Benefits can be configured to require users to authenticate with an OAuth Open ID Connect (OIDC) provider, before allowing the user to begin the Eligibility Verification process.</p> <p>This section describes the related settings and how to configure the application to enable this feature.</p>"},{"location":"configuration/oauth/#authlib","title":"Authlib","text":"<p>Authlib docs</p> <p>Read more about configuring Authlib for Django</p> <p>Benefits uses the open-source Authlib for OAuth and OIDC client implementation. See the Authlib docs for more details about what features are available. Specifically, from Authlib we:</p> <ol> <li>Create an OAuth client using the Django configuration</li> <li>Call <code>client.authorize_redirect()</code> to send the user into the OIDC server\u2019s authentication flow, with our authorization    callback URL</li> <li>Upon the user returning from the OIDC Server with an access token, call <code>client.authorize_access_token()</code> to get a validated    id token from the OIDC server</li> </ol>"},{"location":"configuration/oauth/#django-configuration","title":"Django configuration","text":"<p>OAuth settings are configured as instances of the <code>IdentityGatewayConfig</code> model (defined in the <code>cdt_identity</code> Django application) and <code>EnrollmentFlow</code> model.</p> <p>The data migration file contains sample values for a <code>IdentityGatewayConfig</code> and <code>EnrollmentFlow</code> configuration. You can set values for a real Open ID Connect provider in environment variables so that they are used instead of the sample values.</p>"},{"location":"configuration/oauth/#django-usage","title":"Django usage","text":"<p>The <code>benefits.oauth.client</code> module defines helpers for registering OAuth clients, and creating instances for use in e.g. views.</p> <ul> <li><code>oauth</code> is an <code>authlib.integrations.django_client.OAuth</code> instance</li> </ul> <p>Consumers call <code>benefits.oauth.client.create_client(oauth, flow)</code> with an <code>EnrollmentFlow</code> to obtain an Authlib client instance. If a client for the flow has not been registered yet, <code>_register_provider(oauth_registry, flow)</code> uses data from the given <code>EnrollmentFlow</code> to register the client into this instance and returns the client object.</p>"},{"location":"configuration/rate-limit/","title":"Configuring Rate Limiting","text":"<p>The benefits application has a simple, single-configuration Rate Limit that acts per-IP to limit the number of consecutive requests in a given time period, via nginx <code>limit_req_zone</code> and <code>limit_req</code> directives.</p> <p>The configured rate limit is 12 requests/minute, or 1 request/5 seconds:</p> <pre><code>limit_req_zone $limit zone=rate_limit:10m rate=12r/m;\n</code></pre>"},{"location":"configuration/rate-limit/#http-method-selection","title":"HTTP method selection","text":"<p>An NGINX map variable lists HTTP methods that will be rate limited:</p> <pre><code>map $request_method $limit {\n    default         \"\";\n    POST            $binary_remote_addr;\n}\n</code></pre> <p>The <code>default</code> means don\u2019t apply a rate limit.</p> <p>To add a new method, add a new line:</p> <pre><code>map $request_method $limit {\n    default         \"\";\n    OPTIONS         $binary_remote_addr;\n    POST            $binary_remote_addr;\n}\n</code></pre>"},{"location":"configuration/rate-limit/#app-path-selection","title":"App path selection","text":"<p>The <code>limit_req</code> is applied to an NGINX <code>location</code> block with a case-insensitive regex to match paths:</p> <pre><code>location ~* ^/(eligibility/confirm)$ {\n    limit_req zone=rate_limit;\n    # config...\n}\n</code></pre> <p>To add a new path, add a regex OR <code>|</code> with the new path (omitting the leading slash):</p> <pre><code>location ~* ^/(eligibility/confirm|new/path)$ {\n    limit_req zone=rate_limit;\n    # config...\n}\n</code></pre>"},{"location":"configuration/recaptcha/","title":"Configuring reCAPTCHA","text":"<p>reCAPTCHA docs</p> <p>See the reCAPTCHA Developer\u2019s Guide for more information</p> <p>reCAPTCHA v3 is a free Google-provided service that helps protect the app from spam and abuse by using advanced risk analysis techniques to tell humans and bots apart.</p> <p>reCAPTCHA is applied to all forms in the Benefits app that collect user-provided information. Version 3 works silently in the background, with no additional interaction required by the user.</p>"},{"location":"configuration/recaptcha/#environment-variables","title":"Environment variables","text":"<p>Warning</p> <p>The following environment variables are all required to activate the reCAPTCHA feature</p>"},{"location":"configuration/recaptcha/#django_recaptcha_api_url","title":"<code>DJANGO_RECAPTCHA_API_URL</code>","text":"<p>URL to the reCAPTCHA JavaScript API library.</p> <p>By default, <code>https://www.google.com/recaptcha/api.js</code></p>"},{"location":"configuration/recaptcha/#django_recaptcha_site_key","title":"<code>DJANGO_RECAPTCHA_SITE_KEY</code>","text":"<p>Site key for the reCAPTCHA configuration.</p>"},{"location":"configuration/recaptcha/#django_recaptcha_secret_key","title":"<code>DJANGO_RECAPTCHA_SECRET_KEY</code>","text":"<p>Secret key for the reCAPTCHA configuration.</p>"},{"location":"configuration/recaptcha/#django_recaptcha_verify_url","title":"<code>DJANGO_RECAPTCHA_VERIFY_URL</code>","text":"<p>reCAPTCHA docs</p> <p>Verifying the user\u2019s response</p> <p>URL for the reCAPTCHA verify service.</p> <p>By default, <code>https://www.google.com/recaptcha/api/siteverify</code></p>"},{"location":"configuration/transit-provider/","title":"Onboarding a new transit provider","text":"<p>This guide describes the steps needed to add support for a new transit provider to the application and take them from testing to production.</p> <p>Before starting any configuration, the Cal-ITP team and transit provider staff should have a kickoff meeting to confirm that information provided is complete, implementation plan is feasible, and any approvals needed have been obtained.</p> <p>Then, the following steps are done by the Cal-ITP team to configure a new transit provider in the Benefits application.</p> <p>These steps currently assume the transit provider is using Littlepay as their transit processor. Support for integration with Switchio has been added but still needs to be documented, and integration with other transit processors may be added in the future.</p>"},{"location":"configuration/transit-provider/#pre-configuration-prep-work","title":"Pre-configuration prep work","text":"<p>These items can all be done in parallel.</p>"},{"location":"configuration/transit-provider/#add-transit-provider-to-adoption-table","title":"Add transit provider to adoption table","text":"<p>Typically performed by the Benefits Product Manager.</p> <p>Open a Pull Request adding the new transit provider to the table in the README, similar to this example.</p>"},{"location":"configuration/transit-provider/#produce-formatted-transit-provider-logos","title":"Produce formatted transit provider logos","text":"<p>Typically performed by a designer.</p> <p>The application currently requires one transit provider logo for display on the landing page. The logo should be white with a clear background in the dimensions below:</p> <ul> <li>height: 64px</li> <li>width: any</li> </ul>"},{"location":"configuration/transit-provider/#update-hardcoded-parts-of-the-application","title":"Update hardcoded parts of the application","text":"<p>Typically performed by an engineer.</p> <p>Certain parts of the codebase must be updated to support a new transit provider:</p> <ul> <li><code>benefits/core/context/agency.py</code> (requires a migration)</li> <li><code>benefits/eligibility/views.py</code></li> <li><code>benefits/enrollment/context/flow.py</code></li> <li>Message files</li> </ul> <p>Here is an example PR that makes these updates for a new transit provider.</p>"},{"location":"configuration/transit-provider/#configuration-for-development-and-testing","title":"Configuration for development and testing","text":"<p>These items can all be done in parallel.</p>"},{"location":"configuration/transit-provider/#initial-littlepay-configuration","title":"Initial Littlepay configuration","text":"<p>For development and testing, only a Littlepay customer group is needed since there is no need to interact with any discount product. (We don\u2019t have a way to tap a card against the QA system to trigger a discount and therefore have no reason to associate the group with any product.)</p> <p>This work can begin once the transit provider has a contract in place with Littlepay.</p> <ul> <li>Cal-ITP uses the transit provider\u2019s Littlepay merchant ID to create a customer group in the Littlepay QA environment for each type of eligibility (e.g. senior).<ul> <li>Typically performed by transit provider\u2019s Account Manager</li> <li>For each group that\u2019s created, a group ID will be returned and should be set as the <code>group_id</code> on a new <code>LittlepayGroup</code> in the Benefits database. (See Configuration data for more on loading the database.)</li> </ul> </li> <li>Cal-ITP requests and receives Littlepay Back Office API access (for both PROD and QA) for the new transit provider.<ul> <li>Typically requested by a developer via email to Littlepay</li> </ul> </li> </ul>"},{"location":"configuration/transit-provider/#basic-transit-provider-data-configuration","title":"Basic transit provider data configuration","text":"<ol> <li>Cal-ITP creates a new <code>TransitAgency</code> in the Admin:<ul> <li>Once the code changes above are in place, add a new transit agency with the following:<ul> <li>Slug: Choose the one added in code</li> <li>Short name, long name, info URL, phone, and supported card schemes: Get from their enrollment form</li> <li>Logo: Typically found attached to a GitHub issue comment</li> <li>Active: Leave unchecked for now</li> </ul> </li> </ul> </li> <li>Cal-ITP creates new <code>EnrollmentFlow</code>s in the Admin:<ul> <li>For each type of discount the new transit provider will be using, add an enrollment flow with the following:<ul> <li>System name</li> <li>Label (retype the system name)</li> <li>Choose the <code>TransitAgency</code> that was just created</li> <li>Modify supported enrollment methods, if necessary</li> <li>Choose the appropriate OAuth config (e.g., benefits-logingov for an Older Adults flow)</li> <li>Choose the appropriate claims request</li> </ul> </li> <li>All other fields can likely be skipped or left at their default value.</li> </ul> </li> </ol>"},{"location":"configuration/transit-provider/#configuration-for-production-validation","title":"Configuration for production validation","text":"<p>Production validation is the process of doing a end-to-end test of enrolling a real person\u2019s card through the Benefits app and using it to ride with a discounted fare. The word \u201cproduction\u201d here refers to Littlepay\u2019s production environment (which must be used to take a ride in real life), but the Benefits application\u2019s test environment is used for the enrollment process to avoid disruption of the Benefits production environment.</p> <p>For production validation, both a customer group and discount product are needed. The customer group used here is a temporary one for testing only.</p> <ol> <li>Transit provider staff creates the discount product in production Littlepay (if it does not already exist).</li> <li>Transit provider staff takes a screenshot of the discount product in the Merchant Portal, making sure the browser URL is visible, and sends that to Cal-ITP.</li> <li>Cal-ITP creates a customer group for testing purposes in production Littlepay.</li> <li>Cal-ITP associates the group with the product.<ul> <li>Typically performed by transit provider\u2019s Account Manager</li> <li>Once this is complete, verify that the setup is correct by using the littlepay CLI. Example:  <pre><code>$ littlepay groups products\n\ud83d\udc65 Matching groups (3): \u26a0\ufe0f  prod, edcta\nGroupResponse(id='b9634346-5a03-448d-8f7a-c7bec1169e00', label='Discounted', participant_id='eldorado-transit')\n  \ud83d\uded2 Linked products (1)\n  ProductResponse(id='56755aa9-0227-4208-a8a4-8b3217cebaa9', code='Daily Max - Discounted', status='ACTIVE', type='CAPPING', description='Daily Max - Discounted', participant_id='eldorado-transit')\nGroupResponse(id='f410db55-f1b5-49ef-8072-a5bbb685d0f5', label='Medicare', participant_id='eldorado-transit')\n  \ud83d\uded2 Linked products (2)\n  ProductResponse(id='b9f4b2aa-ecc2-4019-9552-03d7af4c484c', code='Medicare', status='ACTIVE', type='CAPPING', description='Medicare', participant_id='eldorado-transit')\n  ProductResponse(id='05b43044-759d-4938-b150-2adc603e4f74', code='Medicare', status='ACTIVE', type='DISCOUNT', description='Medicare', participant_id='eldorado-transit')\nGroupResponse(id='e88042e2-7b56-4ffa-83b6-fa895a8e6a3d', label='Senior 65+', participant_id='eldorado-transit')\n  \ud83d\uded2 Linked products (2)\n  ProductResponse(id='267edc99-6989-4779-a445-94a121387a25', code='Senior 65+', status='ACTIVE', type='DISCOUNT', description='Senior 65+', participant_id='eldorado-transit')\n  ProductResponse(id='d7d948c2-20bf-4b10-a181-d1f2c89456b6', code='Senior 65+', status='ACTIVE', type='CAPPING', description='Senior 65+', participant_id='eldorado-transit')\n</code></pre></li> </ul> </li> <li> <p>Cal-ITP ensures the code changes made during development and testing configuration are deployed to the test environment.</p> </li> <li> <p>Cal-ITP creates a new <code>TransitAgency</code> in the Admin:</p> <ul> <li>Once the code changes above are in place, add a new transit agency with the following:<ul> <li>Slug: Choose the one added in code</li> <li>Short name, long name, info URL, phone, and supported card schemes: Get from their enrollment form</li> <li>Logo: Typically found attached to a GitHub issue comment</li> <li>Active: Leave unchecked for now</li> </ul> </li> </ul> </li> <li> <p>Cal-ITP creates new <code>EnrollmentFlow</code>s in the Admin:</p> <ul> <li>For each type of discount the new transit provider will be using, add an enrollment flow with the following:<ul> <li>System name</li> <li>Label (retype the system name)</li> <li>Choose the <code>TransitAgency</code> that was just created</li> <li>Modify supported enrollment methods, if necessary</li> <li>Choose the appropriate OAuth config (e.g., benefits-logingov for an Older Adults flow)</li> <li>Choose the appropriate claims request</li> </ul> </li> <li>All other fields can likely be skipped or left at their default value.</li> </ul> </li> <li> <p>Cal-ITP creates a new <code>EnrollmentGroup</code> in the Benefits test environment:</p> <ul> <li>Choose one of the new <code>EnrollmentFlow</code>s.</li> <li>Set the group value to the corresponding testing group ID (from production Littlepay) for production validation.<ul> <li>This will be set back to the QA group value after final production configuration is complete.</li> </ul> </li> </ul> </li> <li>Cal-ITP creates a new <code>LittlepayConfig</code> in the Benefits test environment:<ul> <li>Set Environment to Production for production validation.<ul> <li>This will be set back to QA after final production configuration is complete.</li> </ul> </li> <li>Choose the new <code>TransitAgency</code>.</li> <li>Retrieve Audience and Client ID values for the production config from shared LastPass note.</li> <li>Create the client secret in the Azure Key Vault for the test environment, then paste its name in the Client Secret Name field.<ul> <li>Be sure to refresh the secrets for this to take effect!<ol> <li>In the Azure portal, go to the App Service.</li> <li>Inside the App Service, navigate to Settings -&gt; Environment variables.</li> <li>Click the Pull reference values button to force the App Service to bypass the 24-hour cache and fetch the latest values for Key Vault references. This triggers a graceful restart of the app.</li> </ol> </li> </ul> </li> </ul> </li> <li>Cal-ITP returns to the <code>TransitAgency</code> instance and checks the Active box.</li> </ol> <p>At this point, Cal-ITP and transit provider staff can coordinate to do on-the-ground testing using the test client to enroll a real card and testing it by tapping on a live payment validator.</p>"},{"location":"configuration/transit-provider/#production-validation-testing","title":"Production validation testing","text":"<ol> <li>Transit provider staff (or Cal-ITP staff) does live test in the field.</li> <li>Transit provider staff uses the Merchant Portal to verify the taps and discounts were successful.</li> <li>Cal-ITP uses logs from Azure to verify the user was associated to the customer group.</li> <li>Cal-ITP verifies that Amplitude analytic events are being sent.</li> </ol>"},{"location":"configuration/transit-provider/#configuration-for-production","title":"Configuration for production","text":"<p>Once production validation is done, the transit provider can be added to the production Benefits database.</p> <ol> <li>Cal-ITP creates a customer group for production use in production Littlepay.</li> <li>Cal-ITP associates the group with the discount product created previously during production validation.<ul> <li>Once this is complete, verify that the setup is correct by using the littlepay CLI.</li> </ul> </li> <li> <p>Cal-ITP ensures the code changes made during development and testing configuration are deployed to the prod environment.</p> </li> <li> <p>Cal-ITP creates a new <code>TransitAgency</code> in the Admin:</p> <ul> <li>Once the code changes above are in place, add a new transit agency with the following:<ul> <li>Slug: Choose the one added in code</li> <li>Short name, long name, info URL, phone, and supported card schemes: Get from their enrollment form</li> <li>Logo: Typically found attached to a GitHub issue comment</li> <li>Active: Leave unchecked for now</li> </ul> </li> </ul> </li> <li> <p>Cal-ITP creates new <code>EnrollmentFlow</code>s in the Admin:</p> <ul> <li>For each type of discount the new transit provider will be using, add an enrollment flow with the following:<ul> <li>System name</li> <li>Label (retype the system name)</li> <li>Choose the <code>TransitAgency</code> that was just created</li> <li>Modify supported enrollment methods, if necessary</li> <li>Choose the appropriate OAuth config (e.g., benefits-logingov for an Older Adults flow)</li> <li>Choose the appropriate claims request</li> </ul> </li> <li>All other fields can likely be skipped or left at their default value.</li> </ul> </li> <li> <p>Cal-ITP creates a new <code>EnrollmentGroup</code> in the Benefits prod environment:</p> <ul> <li>Choose one of the new <code>EnrollmentFlow</code>s.</li> <li>Set the group value to the corresponding production group ID.</li> </ul> </li> <li>Cal-ITP creates a new <code>LittlepayConfig</code> in the Benefits prod environment:<ul> <li>Set Environment to Production.</li> <li>Choose the new <code>TransitAgency</code>.</li> <li>Retrieve Audience and Client ID values for the production config from shared LastPass note.</li> <li>Create the client secret in the Azure Key Vault for the prod environment, then paste its name in the Client Secret Name field.<ul> <li>Be sure to refresh the secrets for this to take effect!<ol> <li>In the Azure portal, go to the App Service.</li> <li>Inside the App Service, navigate to Settings -&gt; Environment variables.</li> <li>Click the Pull reference values button to force the App Service to bypass the 24-hour cache and fetch the latest values for Key Vault references. This triggers a graceful restart of the app.</li> </ol> </li> </ul> </li> </ul> </li> <li>Cal-ITP returns to the <code>TransitAgency</code> instance and checks the Active box.</li> </ol> <p>At this point, real customers can begin enrolling their cards and receiving their discounted fares with this transit provider!</p>"},{"location":"configuration/transit-provider/#verify-real-user-enrollments-are-starting-to-happen","title":"Verify real user enrollments are starting to happen","text":""},{"location":"configuration/transit-provider/#amplitude","title":"Amplitude","text":"<p>We consider a transit provider officially onboarded to Cal-ITP Benefits when the transit provider appears in our metrics. Specifically, the transit provider is onboarded when we see one or more complete enrollments for that transit provider in Amplitude.</p> <p>Use this query to confirm:</p> <ul> <li>Segment: All Users</li> <li>Measured as: Event Totals</li> <li>Events: Completed enrollment<ul> <li>User property <code>enrollment_method</code>: <code>digital</code>, <code>in_person</code></li> <li>Grouped by: <code>transit_agency</code></li> </ul> </li> </ul> <p>You can also go directly to the existing Enrollments by transit provider chart.</p>"},{"location":"configuration/transit-provider/#metabase","title":"Metabase","text":"<p>Amplitude currently stores only a year of historical data, so we archive all Cal-ITP data in Metabase. Thus, we also need to ensure metrics for the new transit provider are successfully piped from from Amplitude to Metabase.</p> <p>Use this query to confirm:</p> <p></p> <ul> <li>Data: Fct Benefits Events</li> <li>Filter:<ul> <li>Event Type is returned enrollment</li> <li>Event Properties Status is success</li> <li>Event Time is [some date range that includes the dates you\u2019re expecting to see data for the new transit provider]</li> </ul> </li> <li>Summarize: Count by Event Properties Transit Agency</li> </ul> <p>You can also go directly to the existing Cal-ITP Benefits enrollments by transit provider 2025 chart.</p>"},{"location":"configuration/transit-provider/#cleanup","title":"Cleanup","text":"<p>Once the transit provider is live in production, there are some cleanup steps to take.</p> <p>These items can all be done in parallel, and can also be done in parallel with the analytics verification described above.</p>"},{"location":"configuration/transit-provider/#remove-test-group-in-production-littlepay","title":"Remove test group in production Littlepay","text":"<p>The customer group that was created in production Littlepay for testing purposes can be deleted.</p>"},{"location":"configuration/transit-provider/#update-transit-provider-configuration-in-test-environment","title":"Update transit provider configuration in test environment","text":"<p>The transit provider\u2019s configuration in the test environment should be updated to change the production values back to the QA values for its steady state going forward.</p> <ul> <li>Littlepay config<ul> <li>Environment</li> <li>Audience</li> <li>Client ID</li> <li>Client secret (update value in Azure Key Vault)</li> </ul> </li> <li>Littlepay groups:<ul> <li>Set group IDs back to the groups created previously during development and testing configuration</li> <li>Once this is complete, verify that the setup is correct by using the littlepay CLI.</li> </ul> </li> </ul>"},{"location":"configuration/inc/add-enrollmentflow/","title":"Add enrollmentflow","text":"<ol> <li>Cal-ITP creates new <code>EnrollmentFlow</code>s in the Admin:<ul> <li>For each type of discount the new transit provider will be using, add an enrollment flow with the following:<ul> <li>System name</li> <li>Label (retype the system name)</li> <li>Choose the <code>TransitAgency</code> that was just created</li> <li>Modify supported enrollment methods, if necessary</li> <li>Choose the appropriate OAuth config (e.g., benefits-logingov for an Older Adults flow)</li> <li>Choose the appropriate claims request</li> </ul> </li> <li>All other fields can likely be skipped or left at their default value.</li> </ul> </li> </ol>"},{"location":"configuration/inc/add-transitagency/","title":"Add transitagency","text":"<ol> <li>Cal-ITP creates a new <code>TransitAgency</code> in the Admin:<ul> <li>Once the code changes above are in place, add a new transit agency with the following:<ul> <li>Slug: Choose the one added in code</li> <li>Short name, long name, info URL, phone, and supported card schemes: Get from their enrollment form</li> <li>Logo: Typically found attached to a GitHub issue comment</li> <li>Active: Leave unchecked for now</li> </ul> </li> </ul> </li> </ol>"},{"location":"deployment/","title":"Overview","text":"<p>The Benefits app is currently deployed into a Microsoft Azure account provided by California Department of Technology (CDT)\u2019s Office of Enterprise Technology (OET), a.k.a. the \u201cDevSecOps\u201d team. More specifically, it uses custom containers on Azure App Service. More about the infrastructure.</p>"},{"location":"deployment/#deployment-process","title":"Deployment process","text":"<p>The Django application gets built into a Docker image with NGINX and Gunicorn. SQLite is used within that same container to store configuration data; there is no external database.</p> <p>The application is deployed to an Azure Web App Container using three separate environments for <code>dev</code>, <code>test</code>, and <code>prod</code>.</p> <p>The Deploy workflow is responsible for building that branch\u2019s image and pushing to GitHub Container Registry (GHCR). It also deploys to the Azure Web App, telling Azure to restart the app and pull the latest image.</p> <p>You can view what Git commit is deployed for a given environment by visiting the URL path <code>/static/sha.txt</code>.</p>"},{"location":"deployment/#configuration","title":"Configuration","text":"<p>Sensitive configuration settings are maintained as Application Configuration variables in Azure, referencing Azure Key Vault secrets. Other non-sensitive configuration is maintained directly in the configuration database via the Django Admin.</p>"},{"location":"deployment/#docker-images","title":"Docker images","text":"<p>Docker images for each of the deploy branches are available from GitHub Container Registry (GHCR):</p> <ul> <li>Repository Package page</li> <li>Image path: <code>ghcr.io/cal-itp/benefits</code></li> </ul>"},{"location":"deployment/hotfix/","title":"Making a hotfix release","text":"<p>This list outlines the manual steps needed to make a hotfix release of the <code>benefits</code> app.</p> <p>If <code>main</code> contains in-progress work that is not yet ready for a release but a simple code fix is needed in production, a separate process to test the changes before deploying to production must be undertaken. This is called a hotfix release. Typically, a hotfix release involves a simple code change that can be quickly implemented, in contrast to a rollback release, which generally requires more complex code changes which take more time to implement.</p> <p>Start a new Release on Github</p>"},{"location":"deployment/hotfix/#0-create-a-temporary-hotfix-branch-from-the-latest-release-tag","title":"0. Create a temporary hotfix branch from the latest release tag","text":"<pre><code>git checkout -b &lt;hotfix-branch&gt; &lt;release-tag&gt;\n</code></pre> <p>Replace <code>&lt;hotfix-branch&gt;</code> with the hotfix branch name and <code>&lt;release-tag&gt;</code> with the latest release tag.</p>"},{"location":"deployment/hotfix/#1-fix-whatever-issue-is-wrong-using-the-hotfix-branch","title":"1. Fix whatever issue is wrong using the hotfix branch","text":"<p>Commit the code changes that fix the issue that prompted the hotfix.</p>"},{"location":"deployment/hotfix/#2-tag-the-head-of-the-hotfix-branch-with-a-release-tag","title":"2. Tag the HEAD of the hotfix branch with a release tag","text":"<pre><code>git tag -a YYYY.0M.R\n</code></pre> <p>Git will open your default text editor and prompt you for the tag annotation. For the tag annotation, use the release tag version and close the text editor.</p>"},{"location":"deployment/hotfix/#3-push-the-tag-to-github-to-kick-off-the-hotfix","title":"3. Push the tag to GitHub to kick off the hotfix","text":"<pre><code>git push origin YYYY.0M.R\n</code></pre>"},{"location":"deployment/hotfix/#4-generate-release-notes","title":"4. Generate release notes","text":"<p>Edit release notes with additional context, images, animations, etc. as-needed and link to the Release process issue.</p>"},{"location":"deployment/hotfix/#5-merge-into-main-for-the-next-release","title":"5. Merge into <code>main</code> for the next release","text":"<p>Create a PR to merge the changes from the hotfix branch into <code>main</code> for the next release.</p>"},{"location":"deployment/infrastructure/","title":"Infrastructure","text":"<p>The infrastructure is configured as code via Terraform, for various reasons.</p>"},{"location":"deployment/infrastructure/#getting-started","title":"Getting started","text":"<p>Since the Benefits app is deployed into a Microsoft Azure account provided by the California Department of Technology (CDT)\u2019s Office of Enterprise Technology (OET) team, you\u2019ll need to request access from them to the <code>CDT Digital CA</code> directory so you can get into the Azure portal, and to the <code>California Department of Technology</code> directory so you can access Azure DevOps.</p> <p>The Azure portal is where you can view the infrastructure resources for Benefits. Azure DevOps is where our infrastructure pipeline is run to build and deploy those infrastructure resources.</p>"},{"location":"deployment/infrastructure/#environments","title":"Environments","text":"<p>Within the <code>CDT Digital CA</code> directory, there are two Subscriptions, with Resource Groups under each. (Refer to Azure\u2019s documentation for switching directories.)</p> <p>Each of our environments corresponds to a single Resource Group, Terraform Workspace, and branch.</p> Environment Subscription Resource Group Workspace Branch Dev <code>CDT/ODI Development</code> <code>RG-CDT-PUB-VIP-CALITP-D-001</code> <code>dev</code> <code>main</code> Test <code>CDT/ODI Development</code> <code>RG-CDT-PUB-VIP-CALITP-T-001</code> <code>test</code> <code>test</code> Prod <code>CDT/ODI Production</code> <code>RG-CDT-PUB-VIP-CALITP-P-001</code> <code>default</code> <code>prod</code> <p>All resources in these Resource Groups should be reflected in Terraform in this repository. The exceptions are:</p> <ul> <li>Secrets, such as values under Key Vault. <code>prevent_destroy</code> is used on these Resources.</li> <li>Things managed by DevSecOps</li> </ul>"},{"location":"deployment/infrastructure/#ownership","title":"Ownership","text":"<p>The following things in Azure are managed by the California Department of Technology (CDT)\u2019s DevSecOps (OET) team:</p> <ul> <li>Subcriptions</li> <li>Resource Groups</li> <li>Networking</li> <li>Front Door<ul> <li>Web Application Firewall (WAF)</li> <li>Distributed denial-of-service (DDoS) protection</li> </ul> </li> <li>IAM</li> <li>Service connections</li> </ul> <p>You\u2019ll see these referenced in Terraform as data sources, meaning they are managed outside of Terraform.</p>"},{"location":"deployment/infrastructure/#architecture","title":"Architecture","text":"<p>These diagrams show a high-level view of the architecture per environment, including some external systems (e.g. analytics, error monitoring, eligibility servers).</p>"},{"location":"deployment/infrastructure/#benefits-application","title":"Benefits application","text":"<pre><code>flowchart LR\n    internet[Public internet]\n    frontdoor[Front Door]\n    django[Django application]\n    interconnections[Other system interconnections]\n\n    internet --&gt; Cloudflare\n    Cloudflare --&gt; frontdoor\n    django &lt;--&gt; interconnections\n\n    subgraph Azure\n        frontdoor --&gt; NGINX\n\n        subgraph App Service\n            subgraph Custom container\n                direction TB\n                NGINX --&gt; django\n            end\n        end\n    end</code></pre> <p>Front Door also includes the Web Application Firewall (WAF) and handles TLS termination. Front Door is managed by the DevSecOps team.</p>"},{"location":"deployment/infrastructure/#system-interconnections","title":"System interconnections","text":"<pre><code>flowchart LR\n    benefits[Cal-ITP Benefits]\n    style benefits stroke-width:5px\n    recaptcha[Google reCAPTCHA]\n    rider((User's browser))\n    idg[Identity Gateway]\n    elig_server[Eligibility Server]\n    ac_data[(Agency Card data)]\n    cookies[(Cookies)]\n    sentry[Sentry]\n    login[Login.gov]\n    fare_calc[Transit processor]\n    amplitude[Amplitude]\n\n    benefits --&gt;|Errors| sentry\n    elig_server --&gt;|Errors| sentry\n\n    rider --&gt; benefits\n    rider --&gt;|Credentials and identity proofing| login\n    rider --&gt; recaptcha\n    rider --&gt;|Payment card info| fare_calc\n    rider --&gt;|Events| amplitude\n    rider --&gt;|Session| cookies\n\n    benefits --&gt; idg\n    benefits &lt;--&gt; recaptcha\n    benefits --&gt;|Events| amplitude\n    benefits --&gt;|Group enrollment| fare_calc\n    benefits --&gt; elig_server\n\n    subgraph \"Agency Cards\"\n    elig_server --&gt; ac_data\n    end\n\n    idg --&gt; login\n    login --&gt;|User attributes| idg\n    idg --&gt;|User attributes| benefits</code></pre>"},{"location":"deployment/infrastructure/#naming-conventions","title":"Naming conventions","text":"<p>The DevSecOps team sets the following naming convention for Resources:</p> <pre><code>&lt;&lt;Resource Type&gt;&gt;-&lt;&lt;Department&gt;&gt;-&lt;&lt;Public/Private&gt;&gt;-&lt;&lt;Project Category&gt;&gt;-&lt;&lt;Project Name&gt;&gt;-&lt;&lt;Region&gt;&gt;&lt;&lt;OS Type&gt;&gt;-&lt;&lt;Environment&gt;&gt;-&lt;&lt;Sequence Number&gt;&gt;\n</code></pre>"},{"location":"deployment/infrastructure/#sample-names","title":"Sample Names","text":"<ul> <li><code>RG-CDT-PUB-VIP-BNSCN-E-D-001</code></li> <li><code>ASP-CDT-PUB-VIP-BNSCN-EL-P-001</code></li> <li><code>AS-CDT-PUB-VIP-BNSCN-EL-D-001</code></li> </ul>"},{"location":"deployment/infrastructure/#resource-types","title":"Resource Types","text":"<p>Use the following shorthand for conveying the Resource Type as part of the Resource Name:</p> Resource Convention App Service <code>AS</code> App Service Plan <code>ASP</code> Virtual Network <code>VNET</code> Resource Group <code>RG</code> Virtual Machine <code>VM</code> Database <code>DB</code> Subnet <code>SNET</code> Front Door <code>FD</code>"},{"location":"deployment/infrastructure/#making-changes","title":"Making changes","text":""},{"location":"deployment/infrastructure/#set-up-for-local-development","title":"Set up for local development","text":"<ol> <li>Get access to the Azure account through the DevSecOps team.</li> <li> <p>Install dependencies:</p> <ul> <li>Azure CLI</li> <li>Terraform - see exact version in <code>deploy.yml</code></li> </ul> </li> <li> <p>Authenticate using the Azure CLI.</p> <pre><code>az login\n</code></pre> </li> <li> <p>Outside the dev container, navigate to the <code>terraform/</code> directory.</p> </li> <li> <p>Initialize Terraform. You can also use this script later to switch between environments.</p> <pre><code>./init.sh &lt;env&gt;\n</code></pre> </li> <li> <p>Create a local <code>terraform.tfvars</code> file (ignored by git) from the sample; fill in the <code>*_OBJECT_ID</code> variables with values from the Azure Pipeline definition.</p> </li> </ol>"},{"location":"deployment/infrastructure/#development-process","title":"Development process","text":"<p>When configuration changes to infrastructure resources are needed, they should be made to the resource definitions in Terraform and submitted via pull request.</p> <ol> <li>Make changes to Terraform files.</li> <li> <p>Preview the changes, as necessary.</p> <pre><code>terraform plan\n</code></pre> </li> <li> <p>Submit the changes via pull request.</p> </li> </ol> <p>Azure tags</p> <p>For Azure resources, you need to ignore changes to tags, since they are automatically created by an Azure Policy managed by CDT.</p> <pre><code>lifecycle {\n    ignore_changes = [tags]\n}\n</code></pre>"},{"location":"deployment/infrastructure/#infrastructure-pipeline","title":"Infrastructure pipeline","text":"<p>When code is pushed to any branch on GitHub, our infrastructure pipeline in Azure DevOps runs <code>terraform plan</code>. When the pull request is merged into <code>main</code>, the pipeline runs <code>terraform apply</code>.</p> <p>While other automation for this project is done through GitHub Actions, we use an Azure Pipeline for a couple of reasons:</p> <ul> <li>Easier authentication with the Azure API using a service connnection</li> <li>Log output is hidden, avoiding accidentally leaking secrets</li> </ul>"},{"location":"deployment/infrastructure/#azure-environment-setup","title":"Azure environment setup","text":"<p>These steps were followed when setting up our Azure deployment for the first time:</p> <ul> <li>CDT team creates the resources that they own</li> <li><code>terraform apply</code></li> <li>Set up Slack notifications by creating a Slack email for the #notify-benefits channel, then setting it as a Secret in the Key Vault named <code>slack-benefits-notify-email</code></li> <li>Set required App Service configuration and configuration by setting values in Key Vault (the mapping is defined in app_service.tf)</li> </ul> <p>This is not a complete step-by-step guide; more a list of things to remember. This may be useful as part of incident response.</p>"},{"location":"deployment/release/","title":"Making a regular release","text":"<p>This list outlines the manual steps needed to make a new release of the <code>benefits</code> app.</p> <p>A release is made by pushing an annotated tag. The name of the tag must use the version number format mentioned below. This kicks off a deployment to the production environment and creates a GitHub release. The version number for the app and the release will be the tag\u2019s name. More details on the deployment steps can be found under Workflows.</p> <p>The list of releases can be found on the repository Releases page on GitHub.</p> <p>Start a new Release on Github</p>"},{"location":"deployment/release/#0-decide-on-the-new-version-number","title":"0. Decide on the new version number","text":"<p>A new release implies a new version.</p> <p><code>benefits</code> uses the CalVer versioning scheme, where version numbers look like: <code>YYYY.0M.R</code></p> <ul> <li><code>YYYY</code> is the 4-digit year of the release; e.g. <code>2021</code>, <code>2022</code></li> <li><code>0M</code> is the 2-digit, 0-padded month of the release; e.g. <code>02</code> is February, <code>12</code>   is December.</li> <li><code>R</code> is the 1-based release counter for the given year and month;   e.g. <code>1</code> for the first release of the month, <code>2</code> for the second, and so on.</li> </ul> <p>Version numbers for release candidates append <code>-rcR</code>, where <code>R</code> is the 1-based release counter for the anticipated release. For example, the first release candidate for the <code>2024.01.1</code> release would be <code>2024.01.1-rc1</code>.</p>"},{"location":"deployment/release/#1-create-a-release-candidate-tag-on-main-and-push-it","title":"1. Create a release candidate tag on <code>main</code> and push it","text":"<pre><code>git fetch\ngit checkout main\ngit reset --hard origin/main\ngit tag -a YYYY.0M.R-rcR\n</code></pre> <p>Git will open your default text editor and prompt you for the tag annotation. For the tag annotation, use the release candidate version. Finally, after closing the text editor:</p> <pre><code>git push origin YYYY.0M.R-rcR\n</code></pre> <p>This builds a new package and deploys to the Azure test environments. No GitHub release is created for release candidates.</p>"},{"location":"deployment/release/#2-create-a-release-tag-on-main-and-push-it","title":"2. Create a release tag on <code>main</code> and push it","text":"<pre><code>git fetch\ngit checkout main\ngit reset --hard origin/main\ngit tag -a YYYY.0M.R\n</code></pre> <p>Git will open your default text editor and prompt you for the tag annotation. For the tag annotation, use the title of the Release process issue that kicked off the release. Finally, after closing the text editor:</p> <pre><code>git push origin YYYY.0M.R\n</code></pre> <p>This builds the package and deploys to the Azure production environments. A GitHub release is created.</p>"},{"location":"deployment/release/#3-generate-release-notes","title":"3. Generate release notes","text":"<p>Edit release notes with additional context, images, animations, etc. as-needed and link to the Release process issue.</p>"},{"location":"deployment/rollback/","title":"Making a rollback release","text":"<p>This list outlines the manual steps needed to make a rollback of the <code>benefits</code> app.</p> <p>If a change is deployed to the app that makes it fail to start, making a rollback will deploy the app to a known working state again.</p> <p>Start a new Release on Github</p>"},{"location":"deployment/rollback/#0-create-a-release-tag-on-the-commit-associated-with-the-last-known-good-release-tag","title":"0. Create a release tag on the commit associated with the last known good release tag","text":"<pre><code>git tag -a YYYY.0M.R &lt;commit-hash&gt;\n</code></pre> <p>Replace <code>YYYY.0M.R</code> with the rollback version and <code>&lt;commit-hash&gt;</code> with the hash of the commit associated with the last known good release tag. Git will open your default text editor and prompt you for the tag annotation. For the tag annotation, use the version of the release tag for the rollback and close the text editor.</p>"},{"location":"deployment/rollback/#1-push-the-tag-to-github-to-kick-off-the-rollback","title":"1. Push the tag to GitHub to kick off the rollback","text":"<pre><code>git push origin YYYY.0M.R\n</code></pre>"},{"location":"deployment/rollback/#2-generate-release-notes","title":"2. Generate release notes","text":"<p>Edit release notes with additional context, images, animations, etc. as-needed and link to the Release process issue.</p>"},{"location":"deployment/secrets/","title":"Setting secrets","text":"<p>Secret values used by the Benefits application (such as API keys, private keys, certificates, etc.) are stored in an Azure Key Vault for each environment.</p> <p>To set a secret, you can use the Azure portal or the Azure CLI.</p> <p>There are helper scripts under <code>terraform/secrets</code> which build up the Azure CLI command, given some inputs. The usage is as follows:</p> <p>First, make sure you are set up for local development and that you are in the <code>terraform/secrets</code> directory.</p> <pre><code>cd terraform/secrets\n</code></pre> <p>To set a secret by providing a value:</p> <pre><code>./value.sh &lt;environment_letter&gt; &lt;secret_name&gt; &lt;secret_value&gt;\n</code></pre> <p>where <code>environment_letter</code> is <code>D</code> for development, <code>T</code> for test, and <code>P</code> for production.</p> <p>To set a secret by providing the path of a file containing the secret (useful for multi-line secrets):</p> <pre><code>./file.sh &lt;environment_letter&gt; &lt;secret_name&gt; &lt;file_path&gt;\n</code></pre> <p>To verify the value of a secret, you can use the helper script named <code>read.sh</code>.</p> <pre><code>./read.sh &lt;environment_letter&gt; &lt;secret_name&gt;\n</code></pre>"},{"location":"deployment/secrets/#refreshing-secrets","title":"Refreshing secrets","text":"<p>To make sure the Benefits application uses the latest secret values in Key Vault, you will need to make a change to the app service\u2019s configuration. If you don\u2019t do this step, the application will instead use cached values, which may not be what you expect. See the Azure docs for more details.</p> <p>The steps are:</p> <ol> <li>After setting new secret values, go to the App Service configuration in Azure Portal, and change the value of the setting named <code>change_me_to_refresh_secrets</code>.</li> <li>Save your changes.</li> </ol> <p>The effects of following those steps should be:</p> <ul> <li>A restart of the App Service is triggered.</li> <li>The next time that our Azure infrastructure pipeline is run, the value of <code>change_me_to_refresh_secrets</code> is set back to the value defined in our Terraform file for the App Service resource.</li> </ul>"},{"location":"deployment/troubleshooting/","title":"Troubleshooting","text":""},{"location":"deployment/troubleshooting/#tools","title":"Tools","text":""},{"location":"deployment/troubleshooting/#monitoring","title":"Monitoring","text":"<p>We have ping tests set up to notify about availability of each environment. Alerts go to #benefits-notify.</p>"},{"location":"deployment/troubleshooting/#logs","title":"Logs","text":""},{"location":"deployment/troubleshooting/#azure-app-service-logs","title":"Azure App Service Logs","text":"<p>Open the <code>Logs</code> for the environment you are interested in. The following tables are likely of interest:</p> <ul> <li><code>AppServiceConsoleLogs</code>: <code>stdout</code> and <code>stderr</code> coming from the container</li> <li><code>AppServiceHTTPLogs</code>: requests coming through App Service</li> <li><code>AppServicePlatformLogs</code>: deployment information</li> </ul> <p>For some pre-defined queries, click <code>Queries</code>, then <code>Group by: Query type</code>, and look under <code>Query pack queries</code>.</p>"},{"location":"deployment/troubleshooting/#live-tail","title":"Live tail","text":"<p>After setting up the Azure CLI, you can use the following command to stream live logs:</p> <pre><code>az webapp log tail --resource-group RG-CDT-PUB-VIP-CALITP-P-001 --name AS-CDT-PUB-VIP-CALITP-P-001 2&gt;&amp;1 | grep -v /healthcheck\n</code></pre>"},{"location":"deployment/troubleshooting/#scm","title":"SCM","text":"<p>https://as-cdt-pub-vip-calitp-p-001-dev.scm.azurewebsites.net/api/logs/docker</p>"},{"location":"deployment/troubleshooting/#sentry","title":"Sentry","text":"<p>Cal-ITP\u2019s Sentry instance collects both errors (\u201cIssues\u201d) and app performance info.</p> <p>Alerts are sent to #benefits-notify in Slack. Others can be configured.</p> <p>You can troubleshoot Sentry itself by turning on debug mode and visiting <code>/error/</code>.</p>"},{"location":"deployment/troubleshooting/#specific-issues","title":"Specific issues","text":"<p>This section serves as the runbook for Benefits.</p>"},{"location":"deployment/troubleshooting/#terraform-lock","title":"Terraform lock","text":"<p>General info</p> <p>If Terraform commands fail (locally or in the Pipeline) due to an <code>Error acquiring the state lock</code>:</p> <ol> <li>Check the <code>Lock Info</code> for the <code>Created</code> timestamp. If it\u2019s in the past ten minutes or so, that probably means Terraform is still running elsewhere, and you should wait (stop here).</li> <li>Are any Pipeline runs stuck? If so, cancel that build, and try re-running the Terraform command.</li> <li>Do any engineers have a Terrafrom command running locally? You\u2019ll need to ask them. For example: They may have started an <code>apply</code> and it\u2019s sitting waiting for them to approve it. They will need to (gracefully) exit for the lock to be released.</li> <li>If none of the steps above identified the source of the lock, and especially if the <code>Created</code> time is more than ten minutes ago, that probably means the last Terraform command didn\u2019t release the lock. You\u2019ll need to grab the <code>ID</code> from the <code>Lock Info</code> output and force unlock.</li> </ol>"},{"location":"deployment/troubleshooting/#app-fails-to-start","title":"App fails to start","text":"<p>If the container fails to start, you should see a downtime alert. Assuming this app version was working in another environment, the issue is likely due to misconfiguration. Some things you can do:</p> <ul> <li>Check the logs</li> <li>Ensure the environment variables and configuration data are set properly.</li> <li>Turn on debugging</li> <li>Force-push/revert the environment branch back to the old version to roll back</li> </ul>"},{"location":"deployment/troubleshooting/#littlepay-api-issue","title":"Littlepay API issue","text":"<p>Littlepay API issues may show up as:</p> <ul> <li>The monitor failing</li> <li>The <code>Connect your card</code> button doesn\u2019t work</li> </ul> <p>A common problem that causes Littlepay API failures is that the certificate expired. To resolve:</p> <ol> <li>Reach out to support@littlepay.com</li> <li>Receive a new certificate</li> <li>Put that certificate into the configuration data and/or the GitHub Actions secrets</li> </ol>"},{"location":"deployment/troubleshooting/#eligibility-server","title":"Eligibility Server","text":"<p>If the Benefits application gets a 403 error when trying to make API calls to the Eligibility Server, it may be because the outbound IP addresses changed, and the Eligibility Server firewall is still restricting access to the old IP ranges.</p> <ol> <li>Grab the <code>outbound_ip_ranges</code> <code>output</code> values from the most recent Benefit deployment to the relevant environment.</li> <li>Update the IP ranges<ol> <li>Go to the Eligibility Server Pipeline</li> <li>Click <code>Edit</code></li> <li>Click <code>Variables</code></li> <li>Update the relevant variable with the new list of CIDRs</li> </ol> </li> </ol> <p>Note there is nightly downtime as the Eligibility Server restarts and loads new data.</p>"},{"location":"deployment/workflows/","title":"Workflows","text":"<p>The GitHub Actions deployment workflow configuration lives at <code>.github/workflows/deploy.yml</code>.</p> <p>Info</p> <p>The entire process from GitHub commit to full redeploy of the application can take from around 5 minutes to 10 minutes or more depending on the deploy environment. Have patience!</p>"},{"location":"deployment/workflows/#deployment-steps","title":"Deployment steps","text":"<p>The workflow is triggered with a <code>push</code> to the <code>main</code> branch or when a release candidate or release tag is created on any branch. It also responds to the <code>workflow_dispatch</code> event to allow manually triggering via the GitHub Actions UI.</p> <p>When a deployment workflow runs, the following steps are taken:</p>"},{"location":"deployment/workflows/#1-checkout-code","title":"1. Checkout code","text":"<p>From the tip of the corresponding branch (e.g. <code>main</code>) or the tagged commit</p>"},{"location":"deployment/workflows/#2-authenticate-to-ghcr","title":"2. Authenticate to GHCR","text":"<p>Using the <code>github.actor</code> and built-in <code>GITHUB_TOKEN</code> secret</p>"},{"location":"deployment/workflows/#3-build-and-push-image-to-github-container-registry-ghcr","title":"3. Build and push image to GitHub Container Registry (GHCR)","text":"<p>Build the root <code>Dockerfile</code>, tagging with the SHA from the HEAD commit or tagged commit.</p> <p>Push this image:tag into GHCR.</p>"},{"location":"deployment/workflows/#4-app-service-deploy","title":"4. App Service deploy","text":"<p>Push the new image:tag to the Azure App Service instance.</p>"},{"location":"development/","title":"VS Code with Dev Containers","text":"<p>Info</p> <p>VS Code with Dev Containers is the recommended development setup</p> <p>Warning</p> <p>You must build the base Docker image <code>benefits_client:latest</code> before running the devcontainer. See Local Setup</p>"},{"location":"development/#install-the-dev-containers-extension","title":"Install the Dev Containers extension","text":"<p>VS Code can be used together with Docker via the Dev Containers extension to enable a container-based development environment. This repository includes a <code>devcontainer.json</code> file that configures dev container development and debugging.</p>"},{"location":"development/#open-the-repository-with-vs-code","title":"Open the repository with VS Code","text":"<p>With the Dev Containers extension enabled, open the folder containing this repository inside Visual Studio Code.</p> <p>You should receive a prompt in the Visual Studio Code window; click <code>Reopen in Container</code> to run the development environment inside a container.</p> <p>If you do not receive a prompt, or when you feel like starting from a fresh environment:</p> <ol> <li>Ctrl/Cmd + Shift + P to bring up the command palette in Visual Studio Code</li> <li>Start typing <code>devcontainers</code> to filter the commands</li> <li>Select <code>Rebuild Container</code> to completely rebuild the devcontainer</li> <li>Select <code>Reopen in Container</code> to reopen the most recent devcontainer build</li> </ol>"},{"location":"development/#attach-a-debugger","title":"Attach a debugger","text":"<p>Once running inside a container, press F5 to attach a debugger to the client, running on <code>http://localhost</code> at a port dynamically assigned by Docker. See Docker dynamic ports for more information.</p> <p>Add breakpoints in the code and browse the local site to trigger a pause. Press F5 to continue execution from the breakpoint.</p>"},{"location":"development/#changing-launch-configuration","title":"Changing launch configuration","text":"<p>By default, the application is launched with <code>DJANGO_DEBUG=True</code>, causing Django to provide additional logging and error output and to relax certain security settings.</p> <p>Alternatively, you may attach to an instance launched with <code>DJANGO_DEBUG=False</code>, to allow debugging the app in a state more similar to production.</p> <p>In VS Code, press Ctrl/Cmd + Shift + D to open the <code>Run and Debug</code> pane, where you can select between the various configurations (disregard the duplicate entry, selecting either will work):</p> <p></p> <p>The environment can also be overridden for the debug session by editing the configuration in <code>.vscode/launch.json</code>, where any of the supported environment variables may be specified in the <code>env</code> block. For example, to test the app with reCAPTCHA environment variables:</p> <pre><code>{\n  \"name\": \"Django: Benefits Client\",\n  \"type\": \"debugpy\",\n  \"request\": \"launch\",\n  \"program\": \"${workspaceFolder}/manage.py\",\n  \"args\": [\"runserver\", \"--insecure\", \"0.0.0.0:8000\"],\n  \"django\": true,\n  \"justMyCode\": false,\n  \"env\": {\n    // existing fields...\n    \"DJANGO_DEBUG\": \"true\",\n    \"PYTHONWARNINGS\": \"default\",\n    // add these 2 entries with the values for reCAPTCHA\n    \"DJANGO_RECAPTCHA_SITE_KEY\": \"&lt;SITE KEY HERE&gt;\",\n    \"DJANGO_RECAPTCHA_SECRET_KEY\": \"&lt;SECRET KEY HERE&gt;\"\n  }\n}\n</code></pre> <p>See #1071 for more examples and context.</p>"},{"location":"development/#exiting-devcontainers","title":"Exiting devcontainers","text":"<p>To close out of the container and re-open the directory locally in Visual Studio Code:</p> <ol> <li>Ctrl/Cmd + Shift + P to bring up the command palette in Visual Studio Code</li> <li>Start typing <code>devcontainers</code> to filter the commands</li> <li>Select <code>Reopen Folder Locally</code></li> </ol>"},{"location":"development/application-logic/","title":"Application logic","text":"<p>See also</p> <p>More specific user flow diagrams: Enrollment pathways</p> <p>This page describes how Cal-ITP Benefits defines user flows through the following high-level phases:</p> <ol> <li>Initial setup</li> <li>Identity proofing</li> <li>Eligibility verification</li> <li>Enrollment</li> </ol> <pre><code>flowchart LR\n    start((Start))\n    entry[Initial setup]\n    identity[Identity proofing]\n    eligibility[Eligibility verification]\n    enrollment[Enrollment]\n    complete((End))\n    style complete stroke-width:2px\n\n    start --&gt; entry\n    entry --&gt; identity\n    identity --&gt; eligibility\n    eligibility --&gt; enrollment\n    enrollment --&gt; complete</code></pre> <p>The structure of the source code in <code>benefits/</code> generally follows from these phases:</p> <ul> <li><code>benefits/core/</code> implements shared logic and models, and   defines the user\u2019s entrypoint into the app</li> <li><code>benefits/oauth/</code> implements identity proofing</li> <li><code>benefits/eligibility/</code> implements eligibility   verification</li> <li><code>benefits/enrollment/</code> implements enrollment</li> </ul> <p>Each of these directories contains a standalone Django app registered in the settings.</p> <p>All of the common logic and database models and migrations are defined in <code>benefits.core</code>, and this app is imported by the other apps.</p>"},{"location":"development/application-logic/#django-request-pipeline","title":"Django request pipeline","text":"<p>Each request to the Benefits app is ultimately a Django request and goes through the Django HTTP request pipeline.</p> <p>Benefits uses middleware to pre- and post-process requests for (view) access control, session configuration, and analytics. Benefits also uses context processors to enrich the Django template context with data needed for rendering on the front-end.</p> <p>Key supporting files</p> <p><code>benefits/core/context_processors.py</code></p> <p><code>benefits/core/middleware.py</code></p> <p>In general, the flow of a Django request looks like:</p> <pre><code>flowchart LR\n    user((User))\n    style user stroke-width:2px\n\n    pre_middleware[Request middleware]\n    view_middleware[View-specific middleware]\n    context[Context processors]\n    view[View function]\n    post_middleware[Response middleware]\n\n    user -- Request --&gt; pre_middleware\n    pre_middleware -- Request --&gt; view_middleware\n    view_middleware -- Request --&gt; context\n    context -- Request --&gt; view\n    view -- Response --&gt; post_middleware\n    post_middleware -- Response --&gt; user</code></pre>"},{"location":"development/application-logic/#initial-setup","title":"Initial setup","text":"<p>In this phase, the user makes the initial selections that will configure the rest of their journey.</p> <p>Entrypoint</p> <p><code>benefits/core/views.py</code></p> <p>Key supporting files</p> <p><code>benefits/core/models.py</code></p> <p><code>benefits/core/session.py</code></p> <pre><code>flowchart LR\n    session[(session)]\n    analytics[[analytics]]\n\n    start((Start))\n    pick_agency[\"`Agency picker\n    modal`\"]\n    agency((\"`Agency\n    selected`\"))\n    eligibility((\"`Eligibility type\n    selected`\"))\n    next&gt;\"`_Next phase_`\"]\n    style next stroke-width:2px\n\n    start -- \"1a: Lands on index\" --&gt; pick_agency\n    start -- \"1b: Lands on agency index\" --&gt; agency\n    %% invisible links help with diagram layout\n    start ~~~ session\n    start ~~~ agency\n\n    pick_agency -- \"2: Chooses agency\" --&gt; agency\n    agency -- \"3: Chooses enrollment pathway\" --&gt; eligibility\n\n    eligibility -- \"4: continue\" --&gt; next\n\n    agency -. update -.-o session\n    eligibility -. update -.-o session\n    eligibility -. selected enrollment flow -.-o analytics</code></pre> <p>Depending upon the choice of enrollment pathway, the Next phase above may be:</p> <ul> <li>Identity proofing, for all flows that require user PII (such as for verifying age).</li> <li>Eligibility verification, for Agency card flows that require a physical card from the transit   agency.</li> </ul>"},{"location":"development/application-logic/#identity-proofing","title":"Identity proofing","text":"<p>In this phase, Cal-ITP Benefits takes the user through an OpenID Connect (OIDC) flow as a Client (the Relying Party or RP) of the CDT Identity Gateway (the Identity Provider or IDP), via Login.gov.</p> <p>The CDT Identity Gateway transforms PII from Login.gov into anonymized boolean claims that are later used in eligibility verification.</p> <p>Entrypoint</p> <p><code>benefits/oauth/views.py</code></p> <p>Key supporting files</p> <p><code>benefits/oauth/client.py</code></p> <p><code>benefits/oauth/redirects.py</code></p> <pre><code>flowchart LR\n    session[(session)]\n    analytics[[analytics]]\n\n    start((Initial setup))\n    style start stroke-dasharray: 5 5\n\n    benefits[Benefits app]\n    idg[[\"`CDT\n    Identity Gateway`\"]]\n    logingov[[Login.gov]]\n    claims((Claims received))\n\n    next&gt;\"`_Eligibility\n    verification_`\"]\n    style next stroke-width:2px\n\n    start -- \"1: Clicks login button\" --&gt; benefits\n    %% invisible links help with diagram layout\n    start ~~~ session\n\n    benefits -- \"2: OIDC authorize_redirect\" --&gt; idg\n    benefits -. started sign in  -.-o analytics\n\n    idg &lt;-. \"3: PII exchange\" .-&gt; logingov\n    idg -- \"4: OIDC token authorization\" --&gt; claims\n\n    claims -- \"5: continue\" --&gt; next\n    claims -. update .-o session\n    claims -. finished sign in -.-o analytics</code></pre>"},{"location":"development/application-logic/#eligibility-verification","title":"Eligibility verification","text":"<p>In this phase, Cal-ITP Benefits verifies the user\u2019s claims using one of two methods:</p> <ul> <li>Claims validation, using claims previously stored in the user\u2019s session during Identity proofing</li> <li>Eligibility API verification, using non-PII claims provided by the user in an HTML form submission</li> </ul> <p>Entrypoint</p> <p><code>benefits/eligibility/views.py</code></p> <p>Key supporting files</p> <p><code>benefits/eligibility/verify.py</code></p> <pre><code>flowchart LR\n    session[(session)]\n    analytics[[analytics]]\n\n    start((\"`Previous\n    phase`\"))\n    style start stroke-dasharray: 5 5\n\n    claims[Session claims check]\n    form[HTTP form POST]\n    server[[Eligibility Verification server]]\n    eligible{Eligible?}\n\n    next&gt;\"`_Enrollment_`\"]\n    style next stroke-width:2px\n\n    stop{{Stop}}\n\n    start -- Eligibility API verification --&gt; form\n    form -- Eligibility API call --&gt; server\n    form -. started eligibility -.-o analytics\n    server --&gt; eligible\n\n    start -- Claims validation --&gt; claims\n    session -.-o claims\n    claims --&gt; eligible\n    claims -. started eligibility -.-o analytics\n\n    eligible -- Yes --&gt; next\n    eligible -- No --&gt; stop\n    eligible -. update .-o session\n    eligible -. returned eligibility -.-o analytics</code></pre>"},{"location":"development/application-logic/#enrollment","title":"Enrollment","text":"<p>In this final phase, the user registers their contactless payment card with a concession group configured within the transit processor.</p> <p>Cal-ITP Benefits never processes, transmits, nor stores the user\u2019s payment card details.</p>"},{"location":"development/application-logic/#littlepay","title":"Littlepay","text":"<p>Entrypoint</p> <p><code>benefits/enrollment_littlepay/views.py</code></p> <p>Supporting packages</p> <p><code>cal-itp/littlepay</code></p> <pre><code>sequenceDiagram\nautonumber\n%% Enrollment phase\n    actor user as User\n    participant benefits as Benefits app\n    participant littlepay as Littlepay\n    participant analytics as Analytics\n\nuser-&gt;&gt;benefits: starts enrollment phase\n    activate user\nbenefits--&gt;&gt;user: display enrollment index\nuser-&gt;&gt;littlepay: GET tokenization lib (AJAX)\nlittlepay--&gt;&gt;user: tokenization lib .js\nuser-&gt;&gt;benefits: GET card tokenization access token (AJAX)\n    deactivate user\n    activate benefits\nbenefits-&gt;&gt;littlepay: GET API access token\nlittlepay--&gt;&gt;benefits: access token\nbenefits-&gt;&gt;littlepay: GET card tokenization access token\nlittlepay--&gt;&gt;benefits: access token\nbenefits--&gt;&gt;user: access token\n    deactivate benefits\n    activate user\nuser-&gt;&gt;user: click to initiate payment card collection\nuser--&gt;&gt;user: display Littlepay overlay\nuser--&gt;&gt;analytics: started card tokenization\nuser-&gt;&gt;littlepay: provides debit or credit card details\nlittlepay--&gt;&gt;user: card token\nuser--&gt;&gt;analytics: finished card tokenization\nuser-&gt;&gt;benefits: POST back card token\n    deactivate user\n    activate benefits\nbenefits-&gt;&gt;littlepay: GET API access token\nlittlepay--&gt;&gt;benefits: access token\nbenefits-&gt;&gt;littlepay: GET funding source from card token\nlittlepay--&gt;&gt;benefits: funding source\nbenefits-&gt;&gt;littlepay: enroll funding source in group\nbenefits--&gt;&gt;analytics: returned enrollment\n    deactivate benefits</code></pre>"},{"location":"development/application-logic/#switchio","title":"Switchio","text":"<p>Entrypoint</p> <p><code>benefits/enrollment_switchio/views.py</code></p> <pre><code>sequenceDiagram\nautonumber\n%% Enrollment phase\n    actor user as User\n    participant benefits as Benefits app\n    participant switchio as Switchio\n    participant analytics as Analytics\n\nuser-&gt;&gt;benefits: starts enrollment phase\n    activate user\nbenefits--&gt;&gt;user: display enrollment index\nuser-&gt;&gt;switchio: GET tokenization lib (AJAX)\nswitchio--&gt;&gt;user: tokenization lib .js\nuser-&gt;&gt;benefits: GET registration ID and gateway URL (AJAX)\n    deactivate user\n    activate benefits\nbenefits-&gt;&gt;switchio: GET registration ID and gateway URL\nswitchio--&gt;&gt;benefits: registration ID and gateway URL\nbenefits--&gt;&gt;user: gateway URL\n    deactivate benefits\n    activate user\nuser-&gt;&gt;user: click to initiate payment card collection\nuser--&gt;&gt;analytics: started card tokenization\nuser--&gt;&gt;user: redirect to Switchio page\nuser-&gt;&gt;switchio: provides debit or credit card details\n    deactivate user\n    activate switchio\nswitchio--&gt;&gt;benefits: GET eshopRedirectUri (/switchio)\n    deactivate switchio\n    activate benefits\nbenefits--&gt;&gt;analytics: finished card tokenization\nbenefits-&gt;&gt;switchio: GET registration status\nswitchio--&gt;&gt;benefits: registration status (response also contains card token)\nbenefits-&gt;&gt;switchio: assign discount group to token\nbenefits--&gt;&gt;analytics: returned enrollment\n    deactivate benefits</code></pre>"},{"location":"development/commits-branches-merging/","title":"Commits, branches, and merging","text":""},{"location":"development/commits-branches-merging/#commits","title":"Commits","text":"<p>This project enforces the Conventional Commits style for commit message formatting:</p> <pre><code>&lt;type&gt;[(optional-scope)]: &lt;description&gt;\n\n[optional body]\n</code></pre> <p>Where <code>&lt;type&gt;</code> indicates the nature of the commit, one of a list of possible values:</p> <ul> <li><code>build</code> - related to the build or compile process</li> <li><code>chore</code> - administrative tasks, cleanups, dev environment</li> <li><code>ci</code> - related to automated builds/tests etc.</li> <li><code>docs</code> - updates to the documentation</li> <li><code>feat</code> - new code, features, or interfaces</li> <li><code>fix</code> - bug fixes</li> <li><code>perf</code> - performance improvements</li> <li><code>refactor</code> - non-breaking logic refactors</li> <li><code>revert</code> - undo a prior change</li> <li><code>style</code> - code style and formatting</li> <li><code>test</code> - having to do with testing of any kind</li> </ul> <p>E.g.</p> <pre><code>git commit -m \"feat(eligibility/urls): add path for start\"\n</code></pre>"},{"location":"development/commits-branches-merging/#branches","title":"Branches","text":"<p>The default GitHub branch is <code>main</code>. All new feature work should be in the form of Pull Requests (PR) that target <code>main</code> as their base.</p> <p>In addition to <code>main</code>, the repository has three other long-lived branches:</p> <ul> <li><code>test</code> and <code>prod</code> are read-only (no longer actively used) and correspond to the Test and Production deploy environments, respectively. The last release using these branches was 2024.07.1.</li> <li><code>gh-pages</code> hosts the compiled documentation, and is always forced-pushed by the   docs build process.</li> </ul>"},{"location":"development/commits-branches-merging/#protection-rules","title":"Protection rules","text":"<p>Branch protection rules are in place on <code>main</code> to:</p> <ul> <li>Prevent branch deletion</li> <li>Restrict force-pushing, where appropriate</li> <li>Require passing status checks before merging into the target branch is allowed</li> </ul> <p>Branch protection rules are in place on <code>test</code> and <code>prod</code> to:</p> <ul> <li>Prevent branch deletion</li> <li>Lock the branch, making it read-only so that users cannot push to the branch since the branch is no longer used</li> </ul>"},{"location":"development/commits-branches-merging/#pr-branches","title":"PR branches","text":"<p>PR branches are typically named with a conventional type prefix, a slash <code>/</code>, and then descriptor in <code>lower-dashed-case</code>:</p> <pre><code>&lt;type&gt;/&lt;lower-dashed-descriptor&gt;\n</code></pre> <p>E.g.</p> <pre><code>git checkout -b feat/flow-multi-select\n</code></pre> <p>and</p> <pre><code>git checkout -b refactor/flow-model\n</code></pre> <p>PR branches are deleted once their PR is merged.</p>"},{"location":"development/commits-branches-merging/#merging","title":"Merging","text":"<p>Merging of PRs should be done using the merge commit strategy. The PR author should utilize <code>git rebase -i</code> to ensure their PR commit history is clean, logical, and free of typos.</p> <p>When merging a PR into <code>main</code>, it is customary to format the merge commit message like:</p> <pre><code>Title of PR (#number)\n</code></pre> <p>instead of the default:</p> <pre><code>Merge pull request #number from source-repo/source-branch\n</code></pre>"},{"location":"development/docker-dynamic-ports/","title":"Docker dynamic ports","text":"<p>Docker dynamically assigns host machine ports that map into container application ports.</p>"},{"location":"development/docker-dynamic-ports/#inside-the-devcontainer","title":"Inside the Devcontainer","text":"<p>Info</p> <p>The Devcontainer can bind to a single container\u2019s port(s) and present those to your localhost machine via VS Code. Other services started along with the Devcontainer are not visible in VS Code. See Outside the Devcontainer for how to find information on those.</p> <p>Once started with F5, the <code>benefits</code> Django application runs on port <code>8000</code> inside the Devcontainer. To find the localhost address, look on the PORTS tab in VS Code\u2019s Terminal window. The <code>Local Address</code> corresponding to the record where <code>8000</code> is in the <code>Port</code> column is where the site is accessible on your host machine.</p> <p>Replace <code>0.0.0.0</code> with <code>localhost</code> and use the same port number shown in the <code>Local Address</code> column. This is highlighted by the red box in the image below:</p> <p></p>"},{"location":"development/docker-dynamic-ports/#outside-the-devcontainer","title":"Outside the Devcontainer","text":"<p>When running a <code>docker compose ...</code> command, or in other scenarios outside of the Devcontainer, there are multiple ways to find the <code>http://localhost</code> port corresponding to the service in question.</p>"},{"location":"development/docker-dynamic-ports/#docker-desktop","title":"Docker Desktop","text":"<p>The Docker Desktop application shows information about running containers and services/groups, including information about bound ports. In most cases, the application provides a button to launch a container/service directly in your browser when a port binding is available.</p> <p>In the Containers / Apps tab, expand the service group if needed to find the container in question, where you should see labels indicating the container is <code>RUNNING</code> and bound to <code>PORT: XYZ</code>.</p> <p>Hover over the container in question, and click the Open in Browser button to launch the app in your web browser.</p> <p></p>"},{"location":"development/docker-dynamic-ports/#docker-cli-commands","title":"Docker CLI commands","text":"<p>Using the <code>docker</code> command line interface, you can find the bound port(s) of running containers.</p> <pre><code>docker ps -f name=&lt;service&gt;\n</code></pre> <p>e.g. for the <code>docs</code> service:</p> <pre><code>docker ps -f name=docs\n</code></pre> <p>This prints output like the following:</p> <pre><code>CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                     NAMES\n0d5b2e1fb910   benefits_client:dev   \"mkdocs serve --dev-\u2026\"   2 minutes ago   Up 2 minutes   0.0.0.0:62093-&gt;8000/tcp   benefits_docs_1\n</code></pre> <p>Looking at the <code>PORTS</code> column:</p> <pre><code>PORTS\n0.0.0.0:62093-&gt;8000/tcp\n</code></pre> <p>We can see that locally, port <code>62093</code> is bound to the container port <code>8000</code>.</p> <p>In this case, entering <code>http://localhost:62093</code> in the web browser navigates to the <code>docs</code> site homepage.</p>"},{"location":"development/i18n/","title":"Django message files","text":"<p>Django docs</p> <p>Internationalization and localization</p> <p>Translation</p> <p>Message files</p> <p>English messages: benefits/locale/en/LC_MESSAGES/django.po</p> <p>The Cal-ITP Benefits application is fully internationalized and available in both English and Spanish.</p> <p>It uses Django\u2019s built-in support for translation using message files, which contain entries of <code>msgid</code>/<code>msgstr</code> pairs. The <code>msgid</code> is referenced in source code so that Django takes care of showing the <code>msgstr</code> for the user\u2019s language.</p>"},{"location":"development/i18n/#updating-message-files","title":"Updating message files","text":"<p>Django has a utility command called <code>makemessages</code> to help maintain message files. It ensures that <code>msgid</code>s in the message files are actually used somewhere in source code and also detects new <code>msgid</code>s.</p> <p>There is a helper script that runs this command with some arguments: <code>bin/makemessages.sh</code></p> <pre><code>bin/makemessages.sh\n</code></pre> <p>Developers should use this script to update message files in a consistent way.</p>"},{"location":"development/i18n/#workflow","title":"Workflow","text":""},{"location":"development/i18n/#updating-english","title":"Updating English","text":"<p>Add English copy to templates directly first. Then, run the helper script, <code>bin/makemessages.sh</code>, so Django can update the <code>django.po</code> files for English and Spanish with the new copy.</p>"},{"location":"development/i18n/#updating-spanish","title":"Updating Spanish","text":"<p>Find the English copy in the Spanish <code>django.po</code> file as a <code>msgid</code>, and add the corresponding Spanish translation as the <code>msgstr</code>. Again, run the helper script for formatting and <code>bin/init.sh</code> to confirm the translation is rendered properly.</p>"},{"location":"development/i18n/#adding-agency-specific-copy","title":"Adding agency-specific copy","text":"<p>When templates have different copy per agency, create a new template for that agency-specific copy to live in. See the example of the MST-specific agency index page file, named <code>index--mst.html</code>. Include the agency-specific template file name in the migration object, as done here for MST, with <code>eligibility_index_template=\"eligibility/index--mst.html\"</code>.</p>"},{"location":"development/i18n/#fuzzy-strings","title":"Fuzzy strings","text":"<p>From Django docs:</p> <p><code>makemessages</code> sometimes generates translation entries marked as fuzzy, e.g. when translations are inferred from previously translated strings.</p> <p>Usually, the inferred translation is not correct, so make sure to review the <code>msgstr</code> and fix it if necessary. Then, remove the commented lines starting with <code>#, fuzzy</code> (otherwise the entry will not be used).</p>"},{"location":"development/linting-pre-commit/","title":"Linting and pre-commit","text":""},{"location":"development/linting-pre-commit/#formatting","title":"Formatting","text":"<p><code>black</code> provides Python code formatting via the [<code>ms-python.python</code>][python] VS Code extension.</p> <p><code>prettier</code> provides code formatting for front-end (CSS/JavaScript) via the <code>esbenp.prettier-vscode</code> VS Code extension.</p> <p>See the <code>.vscode/settings.json</code> file for more information on how this is configured in the devcontainer.</p>"},{"location":"development/linting-pre-commit/#linting","title":"Linting","text":"<p><code>flake8</code> provides Python code linting via the [<code>ms-python.python</code>][python] VS Code extension.</p> <p>See the <code>.vscode/settings.json</code> file for more information on how this is configured in the devcontainer.</p>"},{"location":"development/linting-pre-commit/#pre-commit","title":"pre-commit","text":"<p>This repository uses <code>pre-commit</code> hooks to check and format code. The <code>.pre-commit-config.yaml</code> file defines a number of <code>pre-commit</code> hooks, including <code>black</code>, <code>flake8</code>, line ending and whitespace checkers, and more.</p> <p><code>pre-commit</code> is installed and activated within the devcontainer and runs automatically with each commit.</p> <p>Branch protection rules on the environment branches in GitHub ensure that <code>pre-commit</code> checks have passed before a merge is allowed. See the workflow file at <code>.github/workflows/pre-commit.yml</code>.</p>"},{"location":"development/models-migrations/","title":"Django models and migrations","text":"<p>Models and migrations</p> <p><code>benefits/core/models.py</code></p> <p><code>benefits/core/migrations/0001_initial.py</code></p> <p>Cal-ITP Benefits defines a number of models in the core application, used throughout the codebase to configure different parts of the UI and logic.</p> <p>The Cal-ITP Benefits database is a simple Sqlite database that mostly acts as a read-only configuration store. Runtime configuration changes can be persisted via Django\u2019s Admin interface.</p>"},{"location":"development/models-migrations/#updating-models","title":"Updating models","text":"<p>When models are updated, new migrations must be generated to reflect those changes into the configuration database.</p> <p>A simple helper script exists to generate migrations based on the current state of models in the local directory:</p> <p><code>bin/makemigrations.sh</code></p> <pre><code>bin/makemigrations.sh\n</code></pre> <p>This script:</p> <ol> <li>Runs the django <code>makemigrations</code> command</li> <li>Formats the newly regenerated migration file with <code>black</code></li> </ol> <p>Commit the new migration file along with the model changes.</p>"},{"location":"development/test-server/","title":"Test Eligibility Verification server","text":"<p>A basic eligibility verification server is available for testing. The server code is available on GitHub, with its own set of documentation.</p>"},{"location":"development/test-server/#running-locally","title":"Running locally","text":"<pre><code>docker compose up [-d] server\n</code></pre> <p>The optional <code>-d</code> flag will start in detached mode and allow you to continue using the terminal session. Otherwise your terminal will be attached to the container\u2019s terminal, showing the startup and runtime output.</p> <p>The API server is running on <code>http://localhost</code> at a port dynamically assigned by Docker. See Docker dynamic ports for more information on accessing the server on localhost.</p> <p>From within another Compose service container, the server is at <code>http://server:5000</code> using the service-forwarding features of Compose.</p> <p>In either case, the endpoint <code>/verify</code> serves as the Eligibility Verification API endpoint.</p>"},{"location":"development/test-server/#in-the-devcontainer","title":"In the Devcontainer","text":"<p>When running the Devcontainer, the server is automatically started.</p> <p>See Docker dynamic ports for more information on accessing the server on localhost.</p> <p>The server is accessible from within the Devcontainer at its Compose service address: <code>http://server:5000</code>.</p>"},{"location":"enrollment-pathways/","title":"Enrollment pathways","text":"<p>This section describes in more detail some of the different enrollment pathways with current or planned support in the Benefits application.</p>"},{"location":"enrollment-pathways/#current-work","title":"Current work","text":"<p>We do sprint planning and track day-to-day work on our Project Board.</p> <p>See our Milestones for current work tracked against specific features and different enrollment pathways.</p>"},{"location":"enrollment-pathways/#product-roadmap","title":"Product roadmap","text":"<p>Our product roadmap captures what we\u2019re currently building, what we\u2019ve built, and what we plan to build in the future. We update it at the end of each quarter or when priorities change.</p> <pre><code>timeline\n    title Cal-ITP Benefits Product Roadmap\n%% Cal-ITP Benefits Epics (2024)\n          section 2024\n\n          Q1&lt;br&gt;Complete\n          : Benefits admin tool (foundation)\n          : Deploy SBMTD Reduced Fare Mobility ID enrollment pathway\n          : Migrate to Littlepay Backoffice API\n\n          Q2&lt;br&gt;Complete\n          : Support for expiring benefits (low-income)\n          : Improved UX for agency card enrollment\n          : Improved UX for application error states\n\n          Q3&lt;br&gt;Complete\n          : Deploy low-income riders enrollment pathway\n          : Benefits admin tool (agency users)\n          : Benefits admin tool (in-person eligibility verification)\n\n          Q4&lt;br&gt;Complete\n          : Deploy Medicare cardholder enrollment pathway\n          : Support for multiple identity providers (Medicare.gov)\n\n%% Cal-ITP Benefits Epics (2025)\n          section 2025\n\n          Q1&lt;br&gt;Complete\n        : Front-end enhancements and optimization\n        : Deploy in-person enrollments\n        : Utilize CDT Identity Gateway connection library\n\n          Q2&lt;br&gt;Complete\n        : Support for Discover and American Express cards\n\n          Q3&lt;br&gt;Now\n        : Support for multiple transit processors (Enghouse)\n        : UI enhancements to help the application scale\n        : Benefits admin tool (user management)\n\n          Q4&lt;br&gt;Projected\n        : Enhanced Veteran eligibility checks (disability status)\n        : Support for additional identity provider (Socure)\n        : Single eligibility check across multiple benefit options\n        : Eligibility check for individuals with disabilities (CA DMV)\n\n%%{\n  init: {\n    'logLevel': 'debug',\n    'theme': 'default' ,\n    'themeVariables': {\n      'cScale0': 'orange',\n      'cScaleLabel0': 'black',\n      'cScale1': 'yellow',\n      'cScaleLabel1': 'black'\n    }\n  }\n}%%</code></pre>"},{"location":"enrollment-pathways/agency-cards/","title":"Agency cards","text":"<p>An agency card is a generic term for the proprietary physical card tranist providers issue to eligible riders to show they participate in the provider\u2019s reduced fare program. The Courtesy Card program at Monterey-Salinas Transit (MST) is a good example. Agency card programs pre-date the option of fare collection using contactless payments. Transit providers often require riders to show the card to bus operators when boarding to prove their eligibility for reduced fares.</p> <p>During the pilot phase of Cal-ITP Benefits, we offered the agency card enrollment option to transit providers that were early adopters of contactless payments and wanted to use Cal-ITP Benefits as a way to enroll riders in discount groups the application didn\u2019t yet support, such as Medicare cardholders and people with disabilities. As the range of enrollment options in the app expands to cover previously unsupported discount groups, the agency card enrollment option becomes less necessary. We plan to deprecate the agency card enrollment option when the application offers enrollment pathways for all required groups.</p> <p>The agency card enrollment option differs from other options in the application because of the way the app verifies a rider\u2019s eligibility for transit benefits. When a rider chooses the agency card enrollment pathway, the application uses the Eligibility API call. This API call queries data stored offline on the agency side to confirm the rider is active in the program. For all other enrollment options, the Cal-ITP Benefits app confirms rider eligibility by querying external data sources via to the CDT Identity Gateway. See the older adult enrollment pathway as one example.</p>"},{"location":"enrollment-pathways/agency-cards/#demonstration","title":"Demonstration","text":"<p>This video shows the rider experience enrolling for transit benefits using the agency card enrollment pathway.</p>"},{"location":"enrollment-pathways/agency-cards/#architecture","title":"Architecture","text":"<p>To support an agency card deployment in Cal-ITP Benefits, the transit provider produces a list of eligible riders in CSV format. That file is loaded into an instance of the Eligibility Server running in the transit provider\u2019s cloud.</p> <p>Cal-ITP uses the <code>hashfields</code> tool to mask user data before it leaves the transit provider\u2019s on-premises systems to protect rider personal information.</p>"},{"location":"enrollment-pathways/agency-cards/#system-architecture","title":"System architecture","text":"<pre><code>flowchart LR\n    rider((Rider's browser))\n    benefits[Cal-ITP Benefits]\n    api[Eligibility Server]\n    data[Hashed list of eligible riders]\n    cardsystem[Agency card data source]\n\n    rider --&gt; benefits\n\n    subgraph CDT Azure Environment\n        benefits\n    end\n\n    benefits &lt;--&gt; api\n\n    subgraph Transit provider cloud\n        api --&gt; data\n    end\n\n    subgraph Transit provider on-prem\n        cardsystem --&gt; hashfields\n    end\n\n    hashfields --&gt; data</code></pre> <p>Notes:</p> <ul> <li>Eligibility Server source code</li> <li>hashfields source code</li> <li>More details about the Benefits architecture</li> <li>At MST, the <code>Data Source</code> is Velocity, the product MST uses to manage and print Courtesy Cards.</li> </ul>"},{"location":"enrollment-pathways/agency-cards/#process","title":"Process","text":"<pre><code>sequenceDiagram\nautonumber\n    actor Transit rider\n    participant Benefits as Cal-ITP Benefits\n    participant elig_server as Eligibility server\n    participant ac_data as Hashed listed of eligible riders\n    participant Agency card data source\n    participant Transit processor\n\n    Agency card data source--&gt;&gt;ac_data: exports nightly\n       activate ac_data\n    ac_data--&gt;&gt;elig_server: loaded on server start\n    Transit rider-&gt;&gt;Benefits: visits benefits.calitp.org\n        activate Benefits\n    Benefits--&gt;&gt;elig_server: provides agency card details\n        activate elig_server\n    elig_server--&gt;&gt;Benefits: returns eligibility status (y/n)\n        deactivate elig_server\n    Benefits--&gt;&gt;Transit processor: payment enrollment start\n        activate Transit processor\n    Transit rider-&gt;&gt;Transit processor: provides debit or credit card details\n    Transit processor--&gt;&gt;Benefits: card registration confirmation\n        deactivate Transit processor\n        deactivate Benefits</code></pre>"},{"location":"enrollment-pathways/low-income/","title":"Low-income","text":""},{"location":"enrollment-pathways/low-income/#overview","title":"Overview","text":"<p>This use case describes a feature in the Cal-ITP Benefits app that allows Californians to verify their active participation in the CalFresh Program\u2014as a proxy for low-income status\u2014to receive reduced fares for transit when paying by contactless debit or credit card at participating transit providers in California.</p> <p>Actor:\u00a0A person who uses public transit in California. For benefit eligibility, a \u201clow-income rider\u201d is a person who has received CalFresh benefits in any of the previous three months.</p> <p>Goal:\u00a0To verify a transit rider\u2019s financial need so they receive reduced fares when paying by contactless debit or credit card.</p> <p>Precondition:\u00a0The California transit provider offers fixed route service, has installed and tested validator hardware necessary to collect fares using contactless payment on bus or rail lines, and the operator has a policy in place to offer a transit discount to low-income riders.</p>"},{"location":"enrollment-pathways/low-income/#demonstration","title":"Demonstration","text":"<p>Here\u2019s a video showing what the flow looks like for a person receiving CalFresh benefits to confirm their eligibility for a transit benefit through Login.gov and then register their contactless debit or credit card with Littlepay, one of the supported transit processors:</p>"},{"location":"enrollment-pathways/low-income/#basic-flow","title":"Basic Flow","text":"<pre><code>sequenceDiagram\nautonumber\n%% Low-income Rider Enrollment Pathway\n    actor Transit Rider\n    participant Benefits as Benefits app\n    participant IdG as Identity Gateway\n    participant Login.gov\n    participant CDSS\n    participant Transit processor\nTransit Rider-&gt;&gt;Benefits: visits benefits.calitp.org\n    activate Benefits\nBenefits--&gt;&gt;IdG: eligibility verification\n    activate IdG\nTransit Rider-&gt;&gt;Login.gov: account authentication\n    activate Login.gov\nIdG--&gt;&gt;Login.gov: requests required PII\n    activate Login.gov\n    Note right of Login.gov: first name&lt;br&gt;last name&lt;br&gt;Social Security number&lt;br&gt;date of birth\nLogin.gov--&gt;&gt;IdG: returns required PII\n    deactivate Login.gov\nIdG--&gt;&gt;CDSS: check Calfresh enrollment status\n    activate CDSS\nCDSS--&gt;&gt;IdG: return Calfresh enrollment status\n    deactivate CDSS\nIdG--&gt;&gt;Benefits: eligibility response\n    deactivate IdG\n    deactivate Login.gov\nBenefits--&gt;&gt;Transit processor: payment enrollment start\n    activate Transit processor\nTransit Rider-&gt;&gt;Transit processor: provides debit or credit card details\nTransit processor--&gt;&gt;Benefits: payment method enrollment confirmation\n    deactivate Transit processor\n    deactivate Benefits</code></pre> <ol> <li> <p>The transit rider visits the web application at <code>benefits.calitp.org</code> in a browser on their desktop computer.</p> </li> <li> <p>The transit rider chooses the transit provider that serves their area.</p> </li> <li> <p>The transit rider chooses to verify their eligibility as a participant in the CalFresh Program.</p> </li> <li> <p>The transit rider authenticates with their existing\u00a0Login.gov\u00a0account or, if they don\u2019t have one, creates a\u00a0Login.gov\u00a0account.</p> </li> <li> <p>The Cal-ITP Benefits app interfaces with the California Department of Technology Identity Gateway (IdG) to verify benefit eligibility. The IdG uses personal information shared by Login.gov to verify CalFresh participation status.</p> </li> <li> <p>The IdG uses the\u00a0response provided by the California Department of Social Services (CDSS) to determine the rider\u2019s eligibility for a transit benefit.</p> </li> <li> <p>The IdG then passes the response from CDSS as low-income status = TRUE to the Cal-ITP Benefits app to indicate the person is eligible for a benefit.</p> </li> <li> <p>The transit rider provides the debit or credit card details they use to pay for transit to the transit processor that facilitates fare collection for the transit provider.</p> </li> <li> <p>The app registers the low-income benefit with the transit rider\u2019s debit or credit card.</p> </li> </ol>"},{"location":"enrollment-pathways/low-income/#alternative-flows","title":"Alternative Flows","text":"<ul> <li>Suppose the transit rider does not have a desktop computer. In this case, they open the web application at <code>benefits.calitp.org</code> in a mobile browser on their iOS or Android tablet or mobile device to complete enrollment using the basic flow.</li> </ul> <ul> <li>Suppose the transit rider cannot authenticate with Login.gov, or will not create an account. In either case, the app cannot determine their CalFresh Program participation status and they cannot enroll their contactless debit or credit card for a reduced fare.</li> </ul> <ul> <li>Suppose the IdG returns a status of <code>FALSE</code> for CalFresh Program participation status. In that case, the Cal-ITP Benefits app will not allow the transit rider to enroll their contactless debit or credit card for a reduced fare.</li> </ul> <ul> <li>Suppose the debit or credit card expires or is canceled by the issuer. In that case, the transit rider must repeat the basic flow to register a new debit or credit card.</li> </ul> <ul> <li>When the initial transit benefit enrollment period ends after one year from the date of enrollment, the transit rider must repeat the basic flow to re-enroll.</li> </ul> <ul> <li>Suppose the transit rider attempts to re-enroll for a transit benefit as a CalFresh Program participant three months after their enrollment period started. The app will inform them they must wait re-enroll within 14 days of the benefit expiration.</li> </ul> <ul> <li>Suppose the transit rider doesn\u2019t re-enroll for a transit benefit after one year, but continues paying for transit using the card they registered. The transit provider will charge the rider full fare.</li> </ul> <ul> <li>If the transit rider uses more than one debit or credit card to pay for transit, they repeat the basic flow for each card.</li> </ul>"},{"location":"enrollment-pathways/low-income/#postcondition","title":"Postcondition","text":"<p>The transit rider receives a fare reduction each time they use the debit or credit card they registered to pay for transit rides. The number of times they can use the card to pay for transit is unlimited, but the benefit expires one year after enrollment.</p>"},{"location":"enrollment-pathways/low-income/#benefits","title":"Benefits","text":"<ul> <li>The transit rider no longer needs cash to pay for transit rides.</li> </ul> <ul> <li>The transit rider doesn\u2019t have to lock up funds on a closed-loop card offered by the transit agency.</li> </ul> <ul> <li>The transit rider pays for transit rides with their debit or credit card, just as they do for groceries, a cup of coffee, or any other good or service.</li> </ul> <ul> <li>The transit rider can enroll in a transit benefit from home when convenient; they do not have to visit a transit agency in person.</li> </ul> <ul> <li>The transit rider does not have to prove income eligibility with the transit agency. The app simply uses their participation in the CalFresh program to confirm eligibility for a transit benefit.</li> </ul> <ul> <li>The transit agency doesn\u2019t have to craft and policy for a low-icome discount; they simply use the approach implemented in the Cal-ITP Benefits application. As more agencies adopt the application, they also adopt a standard policy for transit benefits.</li> </ul> <ul> <li>Secure state and federal solutions manage the transit rider\u2019s personal identifiable information (PII):\u00a0Login.gov\u00a0and the California Department of Technology Identity Gateway (IdG). Transit riders do not have to share personal information with local transit operators.</li> </ul> <ul> <li>Benefit enrollment takes minutes rather than days or weeks.</li> </ul> <ul> <li>Benefit enrollment doesn\u2019t require online accounts with private companies.</li> </ul>"},{"location":"enrollment-pathways/low-income/#example-scenario","title":"Example Scenario","text":"<p>A CalFresh Program participant uses public transit regularly. They don\u2019t have a car and depend on buses to get to appointments and do errands that take too long to use their bicycle. Even though this person already qualifies for benefits from the California Department of Social Services, they had to navigate another extensive, in-person eligibility process with different requirements to qualify for reduced fares from their local transit agency. They now receive a 50% fare reduction but have to pay for transit rides using the closed loop card provided by the operator to receive the reduced fare. It\u2019s frustrating and inconvenient to reload this closed loop card in $10 payments every week, especially because they sometimes they could use the money tied up on the card to make ends meet. In summary, this person pays for daily expenses using three forms of payment: their Electronic Benefits Transfer (EBT) card for eligible items, their agency card for transportation, and their bank card (or cash) for everything else.</p> <p>The transit provider serving their region of California implements contactless payments on fixed bus routes throughout the service area. This rider uses <code>benefits.calitp.org</code> on their mobile device to confirm their participation in the CalFresh Program offered by CDSS and registers their debit card for reduced fares. They tap to pay when boarding buses in their area and are automatically charged the reduced fare. While they still need to manage funds on their EBT card and their bank card, they no longer need to use their transit provider card to pay for transit. Best of all, they have complete access to all funds in their weekly budget. If other expenses are higher one week, they can allocate additional funds to those areas and ride transit less.</p>"},{"location":"enrollment-pathways/medicare-cardholders/","title":"Medicare cardholders","text":""},{"location":"enrollment-pathways/medicare-cardholders/#overview","title":"Overview","text":"<p>This use case describes a feature in the Cal-ITP Benefits app that allows Californians to verify their active participation in the Medicare program to receive reduced fares for transit when paying by contactless debit or credit card at participating transit operators in California.</p> <p>Actor:\u00a0A person who uses public transit in California. For benefit eligibility, a Medicare cardholder is a person who has enrolled in the Medicare program, has a Medicare.gov account, and is not deceased.</p> <p>Goal:\u00a0To verify a transit rider\u2019s Medicare status so they receive reduced fares when paying by contactless debit or credit card.</p> <p>Precondition:\u00a0The California transit operator offers fixed route service, has installed and tested validator hardware necessary to collect fares using contactless payment on bus or rail lines, and the operator has a policy in place to offer a transit discount to riders enrolled in Medicare.</p>"},{"location":"enrollment-pathways/medicare-cardholders/#demonstration","title":"Demonstration","text":"<p>Here\u2019s a video showing what the flow looks like for a Medicare enrollee to confirm their eligibility for a transit benefit through Medicare.gov and then register their contactless debit or credit card with Littlepay, one of the supported transit processors:</p>"},{"location":"enrollment-pathways/medicare-cardholders/#basic-flow","title":"Basic Flow","text":"<pre><code>sequenceDiagram\nautonumber\n%% Medicare Cardholders Enrollment Pathway\n    actor Transit Rider\n    participant Benefits as Benefits app\n    participant IdG as Identity Gateway\n    participant Medicare as Medicare.gov\n    participant BB API as Blue Button API\n    participant Transit processor\nTransit Rider-&gt;&gt;Benefits: visits benefits.calitp.org\n    activate Benefits\nBenefits--&gt;&gt;IdG: begin eligibility verification\n    activate IdG\nTransit Rider-&gt;&gt;Medicare: account authentication\n    activate Medicare\n    Note over Medicare: authenticated (Y/N)\nMedicare-&gt;&gt;IdG: authentication confirmation\n    deactivate Medicare\nIdG--&gt;&gt;BB API: requests required PII\n    activate BB API\n    Note over BB API: deceased (Y/N)\nBB API--&gt;&gt;IdG: returns required PII\n    deactivate BB API\nIdG--&gt;&gt;Benefits: eligibility response\n    deactivate IdG\nBenefits--&gt;&gt;Transit processor: card enrollment start\n    activate Transit processor\nTransit Rider-&gt;&gt;Transit processor: provides debit or credit card details\nTransit processor--&gt;&gt;Benefits: card enrollment confirmation\n    deactivate Transit processor\n    deactivate Benefits</code></pre> <ol> <li> <p>The transit rider visits the web application at\u00a0benefits.calitp.org\u00a0in a browser on their desktop computer.</p> </li> <li> <p>The transit rider chooses the transit operator that serves an area where they want to ride public transit.</p> </li> <li> <p>The transit rider chooses to verify their eligibility as a person who is living and enrolled in Medicare.</p> </li> <li> <p>The transit rider authenticates with their existing\u00a0Medicare.gov account or, if they don\u2019t have one, creates a\u00a0Medicare.gov account using their Medicare card.</p> </li> <li> <p>The Cal-ITP Benefits app interfaces with the California Department of Technology Identity Gateway (IdG) to verify benefit eligibility. The IdG uses successful authentication with Medicare.gov and personal information shared by the Blue Button API to verify Medicare status.</p> </li> <li> <p>The IdG uses the\u00a0response provided by Blue Button API to determine the rider\u2019s eligibility for a transit benefit.</p> </li> <li> <p>The IdG then passes an eligibility response as Medicare enrollment status = TRUE to the Cal-ITP Benefits app to indicate the person is eligible for a benefit.</p> </li> <li> <p>The transit rider provides the debit or credit card details they use to pay for transit to the transit processor that facilitates fare collection for the transit provider.</p> </li> <li> <p>The app registers the transit benefit with the transit rider\u2019s debit or credit card.</p> </li> </ol>"},{"location":"enrollment-pathways/medicare-cardholders/#alternative-flows","title":"Alternative Flows","text":"<ul> <li>Suppose the transit rider does not have a desktop computer. In this case, they open the web application at\u00a0benefits.calitp.org\u00a0in a mobile browser on their iOS or Android tablet or mobile device to complete enrollment using the basic flow.</li> </ul> <ul> <li>Suppose the transit rider cannot authenticate with\u00a0Medicare.gov, or will not create an account. In either case, the app cannot determine their Medicare status and they cannot enroll their contactless debit or credit card for a reduced fare.</li> </ul> <ul> <li>Suppose the CDT Identity Gateway returns Medicare enrollment status = FALSE. In that case, the Cal-ITP Benefits app will not allow the transit rider to enroll their contactless debit or credit card for a reduced fare.</li> </ul> <ul> <li>Suppose the debit or credit card expires or is canceled by the issuer. In that case, the transit rider must repeat the basic flow to register the new debit or credit card.</li> </ul> <ul> <li>If the transit rider uses more than one debit or credit card to pay for transit, they repeat the basic flow for each card.</li> </ul>"},{"location":"enrollment-pathways/medicare-cardholders/#postcondition","title":"Postcondition","text":"<p>The transit rider receives a fare reduction each time they use the debit or credit card they registered to pay for transit rides. The number of times they can use the card to pay for transit is unlimited and the benefit never expires.</p>"},{"location":"enrollment-pathways/medicare-cardholders/#benefits","title":"Benefits","text":"<ul> <li>The transit rider no longer needs cash to pay for transit rides.</li> </ul> <ul> <li>The transit rider doesn\u2019t have to lock up funds on a closed-loop card offered by the transit operator.</li> </ul> <ul> <li>The transit rider pays for transit rides with their debit or credit card, just as they do for groceries, a cup of coffee, or any other good or service.</li> </ul> <ul> <li>The transit rider can enroll in a transit benefit from home when convenient; they do not have to visit a transit agency in person.</li> </ul> <ul> <li>Secure state and federal solutions manage the transit rider\u2019s personal identifiable information (PII):\u00a0Medicare.gov, the Blue Button API,\u00a0and the California Department of Technology Identity Gateway (IdG). Transit riders do not have to share personal information with local transit operators.</li> </ul> <ul> <li>Benefit enrollment takes minutes rather than days or weeks.</li> </ul> <ul> <li>Benefit enrollment doesn\u2019t require online accounts with private companies.</li> </ul>"},{"location":"enrollment-pathways/medicare-cardholders/#example-scenario","title":"Example Scenario","text":"<p>A 46-year old person with End-Stage Renal Disease (ESRD) uses public transit to get to and from dialysis treatments. They have undergone dialysis treatments for the last four months and are now covered by Medicare. In order to save on transportation expenses, they scheduled an appointment with their local transit agency and made a special trip to complete the in-person eligibility process to qualify for reduced transit fares. They now receive a 50% fare reduction but have to pay for transit rides using the closed-loop card provided by the operator to receive the reduced fare. It\u2019s frustrating and inconvenient to reload this closed-loop agency card in $10 payments every week, especially because they sometimes could use the money tied up on the card to make ends meet. In summary, this person pays for daily expenses using several forms of payment: their agency card for transportation and their debit card or cash for everything else.</p> <p>The transit operator serving their region of California implements contactless payments on fixed bus routes throughout the service area. This rider opens the Cal-ITP Benefits web application at home, completes the workflow to digitally confirm they are enrolled in Medicare, and registers their debit card for reduced fares. Now, when they tap-to-pay when boarding the bus, they are automatically charged the reduced fare. They no longer need to use their closed-loop agency card to pay for transit and have complete access to all funds in their weekly budget.</p>"},{"location":"enrollment-pathways/older-adults/","title":"Older adults","text":"<p>One Benefits application use case is for riders age 65 years and older. The Benefits application verifies the person\u2019s age to confirm eligibility and allows those eligible to enroll their contactless payment card for their transit benefit.</p> <p>Currently, the app uses Login.gov\u2019s Identity Assurance Level 2 (IAL2) to confirm age, which requires a person to have a Social Security number, a valid state-issued ID card and a phone number with a phone plan associated with the person\u2019s name. Adding ways to confirm eligibility for people without a Social Security number, for people who are part of a transit agency benefit program are on the roadmap.</p>"},{"location":"enrollment-pathways/older-adults/#demonstration","title":"Demonstration","text":"<p>Here\u2019s a video showing what the flow looks like for an older adult to confirm their eligibility for a transit benefit through Login.gov and then register their contactless debit or credit card with Littlepay, one of the supported transit processors:</p>"},{"location":"enrollment-pathways/older-adults/#process","title":"Process","text":"<pre><code>sequenceDiagram\n    actor Rider\n    participant Benefits as Benefits app\n    participant IdG as Identity Gateway\n    participant Login.gov\n    participant Transit processor\n\n    Rider-&gt;&gt;Benefits: visits site\n    Benefits--&gt;&gt;IdG: identity proofing\n    IdG--&gt;&gt;Login.gov: identity proofing\n    Rider-&gt;&gt;Login.gov: enters SSN and ID\n    Login.gov--&gt;&gt;IdG: eligibility verification\n    IdG--&gt;&gt;Benefits: eligibility verification\n    Benefits--&gt;&gt;Transit processor: enrollment start\n    Rider-&gt;&gt;Transit processor: enters payment card details\n    Transit processor--&gt;&gt;Benefits: enrollment complete</code></pre>"},{"location":"enrollment-pathways/veterans/","title":"Veterans","text":""},{"location":"enrollment-pathways/veterans/#overview","title":"Overview","text":"<p>This use case describes a feature in the Cal-ITP Benefits app that allows U.S. veterans who use public transit to verify their veteran status and receive reduced fares when paying by contactless debit or credit card at participating transit providers in California.</p> <p>Actor:\u00a0A U.S. veteran who uses public transit in California. For benefit eligibility, a veteran is defined as \u201ca person who served in the active military, naval, or air service, and was discharged or released therefrom under conditions other than dishonorable.\u201d (source)</p> <p>Goal:\u00a0To verify a transit rider\u2019s veteran status and enable the rider to receive reduced fares when paying by contactless debit or credit card.</p> <p>Precondition:\u00a0The California transit provider delivering fixed route service has installed and tested validator hardware necessary to collect fares using contactless payment on bus or rail lines, and the provider has a policy to offer a transit discount for U.S. veterans.</p>"},{"location":"enrollment-pathways/veterans/#demonstration","title":"Demonstration","text":"<p>Here\u2019s a video showing what the flow looks like for a veteran to confirm their eligibility for a transit benefit through Login.gov and then register their contactless debit or credit card with Littlepay, one of the supported transit processors:</p>"},{"location":"enrollment-pathways/veterans/#basic-flow","title":"Basic flow","text":"<pre><code>sequenceDiagram\n%% Veteran Enrollment Pathway\n    actor Transit Rider\n    participant Benefits as Benefits app\n    participant IdG as Identity Gateway\n    participant Login.gov\n    participant VA.gov\n    participant Transit processor\nTransit Rider-&gt;&gt;Benefits: visits benefits.calitp.org\n    activate Benefits\nBenefits--&gt;&gt;IdG: eligibility verification\n    activate IdG\nTransit Rider-&gt;&gt;Login.gov: account authentication\n    activate Login.gov\nIdG--&gt;&gt;Login.gov: requests required PII\n    activate Login.gov\n    Note right of Login.gov: transit rider first name&lt;br&gt;transit rider last name&lt;br&gt;home address&lt;br&gt;date of birth\nLogin.gov--&gt;&gt;IdG: returns required PII\n    deactivate Login.gov\nIdG--&gt;&gt;VA.gov: check veteran status\n    activate VA.gov\nVA.gov--&gt;&gt;IdG: return veteran status\n    deactivate VA.gov\nIdG--&gt;&gt;Benefits: eligibility response\n    deactivate IdG\n    deactivate Login.gov\nBenefits--&gt;&gt;Transit processor: payment enrollment start\n    activate Transit processor\nTransit Rider-&gt;&gt;Transit processor: provides debit or credit card details\nTransit processor--&gt;&gt;Benefits: payment method enrollment confirmation\n    deactivate Transit processor\n    deactivate Benefits</code></pre> <ol> <li>The transit rider visits the web application at\u00a0benefits.calitp.org\u00a0in a browser on their desktop computer.</li> <li>The transit rider chooses the transit provider that serves their area.</li> <li>The transit rider selects the option to receive a reduced fare for veterans.</li> <li>The transit rider authenticates with their existing\u00a0Login.gov\u00a0account or creates a\u00a0Login.gov\u00a0account if they don\u2019t have one.</li> <li>The Cal-ITP Benefits app interfaces with the\u00a0California Department of Technology\u00a0Identity Gateway (IdG) to verify benefit eligibility. The IdG requests the required personal information to verify veteran status from\u00a0Login.gov.</li> <li>The IdG utilizes the\u00a0Veteran Confirmation API\u00a0provided by the US Department of Veterans Affairs to determine the rider\u2019s veteran status.</li> <li>The IdG passes the response from VA.gov as veteran status = TRUE to the Cal-ITP Benefits app to indicate the person is eligible for a benefit.</li> <li>The transit rider provides the debit or credit card details they use to pay for transit to Littlepay, the transit processor that facilitates transit fare collection.</li> <li>The app registers the veteran benefit with the transit rider\u2019s debit or credit card.</li> </ol>"},{"location":"enrollment-pathways/veterans/#alternative-flows","title":"Alternative flows","text":"<ul> <li>If the transit rider does not have a desktop computer, they can open the web application at benefits.calitp.org\u00a0in a mobile browser on their iOS or Android tablet or mobile device to complete enrollment using the basic flow.</li> <li>Suppose the transit rider cannot authenticate with\u00a0Login.gov, or will not create an account. In either case, the app cannot determine their veteran status and, thus, cannot enroll their contactless debit or credit card for a reduced fare.</li> <li>If VA.gov determines the person does not meet the definition of a veteran (IdG returns a veteran status of FALSE), the Cal-ITP Benefits app will not allow the transit rider to enroll their contactless debit or credit card for a reduced fare.</li> <li>If the debit or credit card expires or is canceled by the issuer, the transit rider must repeat the basic flow to register a new debit or credit card.</li> <li>If the transit rider uses more than one debit or credit card to pay for transit, they repeat the basic flow for each card.</li> </ul>"},{"location":"enrollment-pathways/veterans/#postcondition","title":"Postcondition","text":"<p>The transit rider receives a fare reduction each time they use the debit or credit card they registered to pay for transit rides. The number of times they can use the card to pay for transit is unlimited and the benefit never expires.</p>"},{"location":"enrollment-pathways/veterans/#benefits","title":"Benefits","text":"<ul> <li>The transit rider no longer needs cash to pay for transit rides.</li> <li>The transit rider doesn\u2019t have to lock up funds on a closed-loop card offered by the transit provider.</li> <li>The transit rider pays for transit rides with their debit or credit card, just as they pay for any other good or service that accepts contactless payment.</li> <li>The transit rider can enroll in a transit benefit from home when convenient; they do not have to visit a transit provider in person.</li> <li>Secure state and federal solutions manage the transit rider\u2019s personal identifiable information (PII):\u00a0Login.gov\u00a0and the California Department of Technology Identity Gateway (IdG). Transit riders do not have to share personal information with local transit agencies.</li> <li>Benefits enrollment takes minutes rather than days or weeks.</li> </ul>"},{"location":"enrollment-pathways/veterans/#example-scenario","title":"Example scenario","text":"<p>A veteran in California uses public transit regularly. They don\u2019t have a car and depend on buses to get to appointments and do errands that take too long to use their bicycle. They receive a 50% fare reduction for being a U.S. veteran but have to pay for transit rides using the closed loop card provided by the agency to receive the reduced fare. It\u2019s frustrating and inconvenient to reload this agency card in $10 payments every week, especially because they sometimes need the money tied up on the card to pay for groceries and medication.</p> <p>The transit provider serving their part of California implements contactless payments on fixed bus routes throughout the service area. This rider uses\u00a0benefits.calitp.org\u00a0to confirm their veteran status and register their debit card for reduced fares. They tap to pay when boarding buses in their area and are automatically charged the reduced fare. They no longer need to carry one card to pay for transit and another for other purchases. Best of all, they have complete access to all funds in their weekly budget. If food and medication costs are higher one week, they can allocate additional funds to those areas and ride transit less.</p>"},{"location":"getting-started/","title":"Local setup","text":"<p>Running the Benefits application in a local, non-production environment requires Docker.</p> <p>The following commands should be run in a terminal program like <code>bash</code>.</p>"},{"location":"getting-started/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/cal-itp/benefits\n</code></pre>"},{"location":"getting-started/#create-an-environment-file","title":"Create an environment file","text":"<p>The application is configured with defaults to run locally, but an <code>.env</code> file is required to run with Docker Compose. Start from the existing sample:</p> <pre><code>cp .env.sample .env\n</code></pre> <p>E.g. to change the localhost port from the default <code>8000</code> to <code>9000</code>, add the following line to your <code>.env</code> file:</p> <pre><code>DJANGO_LOCAL_PORT=9000\n</code></pre> <p>Note</p> <p>You will need to change <code>DJANGO_LOCAL_PORT</code> to a specific value in order to test locally with the CDT Identity Gateway\u2019s dev environment. Compiler developers, this value can be found in our shared notes in LastPass.</p> <p>See Configuration for more details on supported environment variables and their settings.</p>"},{"location":"getting-started/#run-the-build-script","title":"Run the build script","text":"<p>This builds the runtime and devcontainer images:</p> <pre><code>bin/build.sh\n</code></pre> <p>If you need all layers to rebuild, use:</p> <pre><code>docker compose build --no-cache client\n</code></pre>"},{"location":"getting-started/#start-the-client-in-a-vs-code-dev-container","title":"Start the client in a VS Code dev container","text":"<p>From this point forward, the recommended local development setup is to run the app with the VS Code Dev Containers extension.</p> <p>See Development for more details on setting up a dev container and developing with it.</p> <p>Alternatively, read on to run the app traditionally with Docker Compose.</p>"},{"location":"getting-started/#start-the-client-traditionally","title":"Start the client traditionally","text":"<p>The optional <code>-d</code> flag will start in detached mode and allow you to continue using the terminal session.</p> <pre><code>docker compose up -d client\n</code></pre> <p>Otherwise attach your terminal to the container\u2019s terminal, showing the startup and runtime output:</p> <pre><code>docker compose up client\n</code></pre> <p>After initialization, the client is running on http://localhost:8000 by default.</p> <p>The backend administrative interface can be accessed at the <code>/admin</code> route using the superuser account credentials set in your <code>.env</code> file.</p> <p>Stop the running services with:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"getting-started/#minimum-configuration-needed-for-your-first-manual-end-to-end-test","title":"Minimum configuration needed for your first manual end-to-end test","text":"<p>The following updates must be made to run a full end-to-end test using the sample agency (CST), the Older Americans flow via Login.gov and the CDT Identity Gateway(IdG) dev environment, and the Littlepay QA environment.</p> <p>Note</p> <p>Compiler developers, these values can be found in our shared notes in LastPass.</p>"},{"location":"getting-started/#env-updates","title":"<code>.env</code> updates","text":"<ul> <li>Change <code>cst_littlepay_client_secret</code> from the default (<code>secret</code>) to the appropriate value</li> <li>Set <code>DJANGO_LOCAL_PORT</code> to the right value for the dev IdG to let you connect via localhost</li> <li>Set <code>littlepay_qa_api_base_url</code></li> </ul> <p>Warning</p> <p>Be sure to rebuild your devcontainer before proceeding.</p>"},{"location":"getting-started/#django-admin-updates","title":"Django Admin updates","text":"<ul> <li>Identity gateway configs (benefits-logingov):<ul> <li>client_id</li> <li>authority</li> </ul> </li> <li>Littlepay configs ((QA) cst)<ul> <li>audience</li> <li>client_id</li> </ul> </li> <li>Littlepay groups (Older Adult (cst)):<ul> <li>group_id</li> </ul> </li> </ul> <p>Compiler developers, instead of setting these manually, you can:</p> <ol> <li>Grab the \u201cBenefits fixtures with secrets for local development\u201d note from our shared notes in LastPass</li> <li>Put it in a new JSON file named something like <code>dev_fixtures.json</code></li> <li>Change the value of <code>DJANGO_DB_FIXTURES</code> in your <code>.env</code> file to point to your new <code>dev_fixtures.json</code></li> <li>Rebuild the devcontainer</li> </ol>"},{"location":"getting-started/#logingov-test-account","title":"Login.gov test account","text":"<p>For details on creating an identity-proofed account for testing in the Login.gov sandbox, see Manual Tests.</p> <p>You should now be ready to perform a complete end-to-end test in your local environment! When arriving at the Littlepay form, use any of the acceptable forms of test data for Visa or MasterCard accounts.</p>"},{"location":"getting-started/#managing-test-data-going-forward","title":"Managing test data going forward","text":"<p>If you\u2019re going to be using the local environment you just set up for ongoing development, be aware that by default the database will be dropped and fixtures will be reloaded every time the devcontainer is started (not only on rebuilding). This helps ensure consistent test data across PR reviews.</p> <p>Compiler developers, be sure to follow the instructions in the Django Admin updates section above to set up the fixtures with our development secrets in them.</p> <p>If you have a need to maintain some test data that you\u2019ve added via the Django Admin across multiple development sessions:</p> <ol> <li>Set <code>DJANGO_DB_RESET=false</code> in your <code>.env</code> file</li> <li>Create a new set of temporary fixtures:    <pre><code>python manage.py dumpdata --indent 2 --output benefits/core/migrations/temp_fixtures.json\n</code></pre><ul> <li>It\u2019s important that the filename end in <code>fixtures.json</code> so that it\u2019s ignored by Git.</li> </ul> </li> <li>Set <code>DJANGO_DB_FIXTURES</code> to the path of the new file you just created in <code>.env</code></li> <li>Rebuild the devcontainer</li> </ol> <p>Or, if you made a temporary change to one of the objects created by the fixtures that you don\u2019t want to lose, you can prevent the fixtures from being reloaded by setting <code>DJANGO_DB_FIXTURES</code> to <code>false</code> (or any string that doesn\u2019t resolve to a real fixtures file ending in <code>fixtures.json</code>).</p>"},{"location":"getting-started/documentation/","title":"Documentation","text":"<p>This website is built using <code>mkdocs</code> from the contents of the <code>main</code> (default) branch.</p> <p>The <code>mkdocs.yml</code> file in the repository root configures the build process, including the available plugins.</p>"},{"location":"getting-started/documentation/#editing","title":"Editing","text":"<p>All content lives under the <code>docs/</code> directory in the repository.</p> <p>To add new sections/articles, create new directories and files under the <code>docs/</code> directory, in Markdown format.</p> <p>The pencil icon is a shortcut to quickly edit the content of the page you are viewing on the website:</p> <p></p> <p>Above: Screenshot showing the edit pencil circled in red</p>"},{"location":"getting-started/documentation/#features","title":"Features","text":"<ul> <li> <p>Material for MkDocs: Reference</p> <p>See <code>mkdocs.yml</code> for enabled plugins/features</p> </li> </ul> <ul> <li> <p>Mermaid</p> <p>Use code fences with <code>mermaid</code> type to render Mermaid diagrams within docs. For example, this markdown:</p> <pre><code>```mermaid\ngraph LR\n    Start --&gt; Stop\n```\n</code></pre> <p>Yields this diagram:</p> <pre><code>graph LR\n    Start --&gt; Stop</code></pre> </li> </ul>"},{"location":"getting-started/documentation/#running-locally","title":"Running locally","text":"<p>The documentation website can be run locally using Docker Compose:</p> <pre><code># from inside the .devcontainer/ directory\ndocker compose up docs\n</code></pre> <p>The site is served from <code>http://localhost</code> at a port dynamically assigned by Docker. See Docker dynamic ports for more information.</p> <p>The website is automatically rebuilt as changes are made to <code>docs/</code> files.</p>"},{"location":"getting-started/documentation/#in-the-devcontainer","title":"In the Devcontainer","text":"<p>When running the Devcontainer, the docs site is automatically started.</p> <p>See Docker dynamic ports for more information on accessing the site on localhost.</p>"},{"location":"getting-started/documentation/#deploying","title":"Deploying","text":"<p>A GitHub Action watches for pushes to <code>main</code>, and uses <code>mhausenblas/mkdocs-deploy-gh-pages</code> to build the <code>mkdocs</code> content, force-pushing to the <code>gh-pages</code> branch. At that point, GitHub Pages redeploys the docs site.</p>"},{"location":"product-and-design/analytics/","title":"Analytics","text":"<p>The Cal-ITP Benefits application, currently live at <code>https://benefits.calitp.org/</code>, uses Amplitude to collect specific user and event data properties to analyze application usage.</p>"},{"location":"product-and-design/analytics/#information-not-collected","title":"Information not collected","text":"<p>The following user attributes are not collected:</p> <ul> <li>IP address</li> <li>Designated Market Area (DMA)</li> </ul> <p>See the Amplitude analytics code on GitHub.</p>"},{"location":"product-and-design/analytics/#user-information-collected","title":"User information collected","text":"<p>A combination of default and application-specific custom user properties are collected for each user who visits the Benefits web application.</p>"},{"location":"product-and-design/analytics/#default-amplitude-user-properties-collected","title":"Default Amplitude user properties collected","text":"<p>The following attributes are collected from the browser of every user who visits the application, provided the browser does not block the tracking library:</p> User property Description Example value(s) Carrier The device\u2019s carrier. <code>Verizon</code> Country Country of the event. This is pulled using GeoIP. <code>United States</code> City City of the event. This is pulled using GeoIP. <code>San Francisco</code> Device family Family of the device. <code>Apple iPhone, Samsung Galaxy Tablet, Windows</code> Device type Specific type of device. <code>Apple iPhone 6, Samsung Galaxy Note 4, Windows</code> Language Language of the device. <code>English</code> Library Library used to send the event. <code>Amplitude-iOS/3.2.1, HTTP/1.0</code> OS Operating system is the name of the user\u2019s mobile operating system or browser. Operating system version is the version of the users\u2019 mobile operating system or browser. <code>iOS 9.1, Chrome 46</code> Platform Platform of the product. <code>Web</code> Region Region (e.g. state, province, county) of the event. This is pulled using GeoIP. <code>California</code> Start version First version of the application identified for the user. <code>1.0.0</code> Version Current verison of the application identified for the user <code>1.0.0</code> <p>Read more about each property on the Amplitude documentation.</p>"},{"location":"product-and-design/analytics/#custom-user-properties-collected","title":"Custom user properties collected","text":"<p>The following custom user attributes are collected when the user performs specific actions on the application, like selecing an eligibility type or transit agency:</p> User property Description Example value(s) <code>card_category</code> Type of card successfully enrolled <code>debit</code> or <code>credit</code> <code>card_scheme</code> Brand of card successfully enrolled <code>visa</code>, <code>mastercard</code>, etc. <code>enrollment_flows</code> Enrollment flows chosen by user\u00a0 <code>[veteran]</code> <code>eligibility_verifier</code> How eligibility for flow is verified <code>cdt-logingov</code> <code>referrer</code> URL that the event came from\u00a0 <code>https://benefits.calitp.org/help/</code> <code>referring_domain</code> Domain that the event came from\u00a0 <code>benefits.calitp.org</code> <code>transit_agency</code> Agency chosen by the user\u00a0 <code>Monterey-Salinas Transit</code> <code>user_agent</code> User\u2019s browser agent\u00a0 <code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36</code>"},{"location":"product-and-design/analytics/#event-information-collected","title":"Event information collected","text":"<p>Information is collected on key user actions on the app, called events. Read about each event on the Amplitude event documentation for Benefits. Each event is categorized within one of four categories: core, authentication, eligibility or enrollment.</p>"},{"location":"product-and-design/analytics/#core-events","title":"Core events","text":"<p>These events track when a user clicks on a link on the application.</p> <ul> <li>changed language</li> <li>clicked link</li> <li>viewed page</li> </ul> <p>Read more on each of these events on the Amplitude event documentation for Benefits, filtered by Core.</p>"},{"location":"product-and-design/analytics/#authentication-events","title":"Authentication events","text":"<p>These events track the progress of a user going through the authentication process of both signing in and optionally signing out.</p> <ul> <li>canceled sign in</li> <li>finished sign in</li> <li>finished sign out</li> <li>started sign in</li> <li>started sign out</li> </ul> <p>Read more on each of these events on the Amplitude event documentation for Benefits, filtered by Authentication.</p>"},{"location":"product-and-design/analytics/#eligibility-events","title":"Eligibility events","text":"<p>These events track the progress of a user choosing an enrollment flow and completing eligibility verification.</p> <ul> <li>selected enrollment flow</li> <li>started eligibility</li> <li>returned eligibility</li> </ul> <p>Read more on each of these events on the Amplitude event documentation for Benefits, filtered by Eligibility.</p>"},{"location":"product-and-design/analytics/#enrollment-events","title":"Enrollment events","text":"<p>These events track the progress of a user who has successfully verified their eligibility and is enrolling their payment card with the system.</p> <ul> <li>finished card tokenization</li> <li>returned enrollment</li> <li>started card tokenization</li> </ul> <p>Read more on each of these events on the Amplitude event documentation for Benefits, filtered by Enrollment.</p>"},{"location":"product-and-design/analytics/#key-metrics","title":"Key metrics","text":"<p>Various key metrics are collected and analyzed, including:</p> <ul> <li>Number of users who successfully completed authentication: Users who <code>started sign in</code>, <code>finished sign in</code></li> <li>Number of users who successfully verified eligibility: Users who completed the above and <code>selected enrollment flow</code>, <code>started eligibility</code>, <code>returned eligibility</code> with a status of <code>True</code></li> <li>Numbers of users who successfully completed enrollment: Users who completed all of the above and <code>started card tokenization</code>, <code>finished card tokenization</code> and <code>returned enrollment</code> with a status of <code>success</code></li> </ul>"},{"location":"product-and-design/copy-delivery/","title":"Copy delivery process","text":""},{"location":"product-and-design/copy-delivery/#summary","title":"Summary","text":"<p>Design and Product use the tools Figma, Ditto, and Crowdin to craft product copy, manage all copy and variations of copy (e.g. agency-specific copy or Spanish translation copy), and translate copy. Developers then create and update <code>django.po</code> message files for each supported language from copy created and implemented by Design and Product.</p> <p>At a high level, this is the process for creating and delivering copy:</p> <ol> <li>In Figma all new design work, including copy, is done in a new branch.</li> <li>Work with product and other designers to develop copy.</li> <li>Present designs, including copy, via a Design Review with Product and Development.</li> <li>Iterate as needed.</li> <li>Sync all final copy with Ditto and Crowdin.</li> <li>Submit copy for translation, and add to Ditto.</li> <li>Hand off finalized work during a second meeting, called The Hand-Off wherein developers craft GitHub issues.</li> <li>Once work is reviewed and approved, then Designers select Review and Merge Changes from the branch drop down menu.</li> <li>Ensure all changes are accurate then merge.</li> <li>Mark all screens with changes as Ready for dev.</li> <li>If during implementation, developers note any typos or small mistakes they can comment in Figma to correct those. Engineers cannot ask design to change anything substantial after hand-off. That would be a new design process.</li> </ol>"},{"location":"product-and-design/copy-delivery/#the-copy-process-for-designers","title":"The copy process for Designers","text":""},{"location":"product-and-design/copy-delivery/#starts-with-design-in-figma","title":"Starts with design in Figma\u2026","text":"<p>Always start a new branch when starting a new design project for an existing entity. This is especially important when working as a contractor for Compiler, so that the files are consistent for the developers.</p> <p>If Developers have any comments or concerns regarding the copy, then Figma comments are the most appropriate place to record those. Comments can and should be made during the Design Review and subsequent iteration phase. All parties should make efforts to review and comment on copy during the Design Review phase.</p>"},{"location":"product-and-design/copy-delivery/#syncs-between-figma-and-ditto","title":"\u2026syncs between Figma and Ditto\u2026","text":"<p>Syncing between Figma and Ditto is a straightforward process that allows Compiler folks to work either in Ditto or Figma depending on their permission levels, role, or preference. This means the copy can be considered the source of truth in either Figma or Ditto and that copy can be exported or saved from either Ditto or Figma.</p> <p>Syncing within the Figma app occurs when opening the Ditto plugin while working in the main branch of your linked Figma file. You can resync by clicking the resync icon on the top right corner of the plugin window. When working in Ditto, resync with the file from the top navigation bar on the right side.</p>"},{"location":"product-and-design/copy-delivery/#a-note-on-syncing-new-copy-in-ditto","title":"A note on syncing new copy in Ditto","text":"<ol> <li>Merge all branch changes in Figma first and ensure the design work is finalized before moving to Ditto and finalizing copy.</li> <li>Sync Ditto in the app.</li> <li>Review all new changes for accuracy.</li> <li>Create and update components as needed.</li> <li>Include variants on any new component as needed.</li> </ol>"},{"location":"product-and-design/copy-delivery/#a-note-on-branching-in-ditto","title":"A note on branching in Ditto","text":"<p>Using branching in Ditto is still in Beta, and there\u2019s potential for losing work. The main branch in Ditto is also locked for work while the new branch is being worked on. This feels unnecessarily complicated, so Design recommends that all approval of designs and copy happens in a Figma branch\u2013merge that branch with the main Figma file, then create any new components in Ditto (and go through the process of content localization) using the main Figma file. In other words, Design does not recommend using the branching process in Ditto.</p>"},{"location":"product-and-design/copy-delivery/#a-note-on-working-primarily-in-ditto","title":"A note on working primarily in Ditto","text":"<p>This documentation assumes that design work, including copy, is conducted in Figma first. If a designer is working only on adding or updating copy, they can work solely in Ditto. If this is your process, then ensure that you have synced with the main Figma branch after finishing your update.</p>"},{"location":"product-and-design/copy-delivery/#a-note-on-viewing-spanish-copy-and-spanish-variants-in-figma","title":"A note on viewing Spanish copy and Spanish variants in Figma","text":"<p>For viewing copy in Spanish in Figma, a designer needs to have the Ditto plugin active. From there, select a frame and the Ditto plugin should automatically move to the Selected tab, and within that tab there\u2019s a dropdown to preview different variants.</p> <p></p>"},{"location":"product-and-design/copy-delivery/#then-syncs-between-ditto-and-crowdin-for-translations","title":"\u2026then syncs between Ditto and Crowdin for translations.","text":""},{"location":"product-and-design/copy-delivery/#how-to-sync-base-text","title":"How to sync base text","text":"<p>Uploading base text from Ditto to Crowdin is an easy process. Open Crowdin. From within the Cal-ITP project, go to the Integrations tab, and then select the file from Ditto you would like to translate. Select the Sync to Crowdin button.</p>"},{"location":"product-and-design/copy-delivery/#how-to-sync-variants","title":"How to sync variants","text":"<p>Currently the Crowdin integration only exports the Base text from Ditto. So in order to have Crowdin essentially treat a variant in Ditto as base text that can get translated, we need to employ a manual workaround:</p> <p>For translating variants, DO NOT use the Ditto &lt;&gt; Crowdin integration, but rather a manual upload and download process.</p> <ol> <li>Export the variant text from Ditto as its own JSON file. From the component library, click the Export button. Select Flat JSON, and then the Variant you\u2019d like in the dropdown, and export it.</li> <li>Upload that export from Ditto into Crowdin. Go to Sources and manually drag the component library JSON files (e.g. MST and SBMTD) into the appropriate Crowdin file.</li> <li>Compiler has an account with BabbleOn for translation services within the Crowdin platform. Currently we work with Salim at BabbleOn, and we email him and ask for the translations to be done in Crowdin. Product manages our relationship with BabbleOn.</li> <li>After Salim has confirmed the translations are complete, then export the new translation out of Crowdin as a JSON file.</li> <li>Upload that JSON file back into Ditto. Ditto should recognize that those strings already exist in your component library (via the component IDs), and allow you to assign the new translated text you\u2019re uploading to a variant. Create a new variant for the translation or attach to one you\u2019ve already created (ex: MST-Spanish).</li> </ol> <p></p>"},{"location":"product-and-design/copy-delivery/#developers-create-or-update-djangopo-files","title":"Developers create or update Django.po files","text":"<p>After Product and Design have finalized their portion of the copy process, developers are able to create and update <code>django.po</code> message files for each supported language. The <code>locale</code> folder in this repository contains the <code>django.po</code> message files for English and Spanish translation strings for the Benefits application.</p> <p>Translation strings include all application copy, including:</p> <ul> <li>All application copy</li> <li>Image and illustration alt tags</li> <li>Page titles used in the browser tab</li> <li>In-line link URLs</li> <li>Error messages (like no script, no cookies warnings)</li> </ul> <p>Developers can retrieve all Spanish copy and Spanish variant copy (e.g. Spanish-MST) from Ditto.</p>"},{"location":"product-and-design/copy-delivery/#copy-delivery-process-responsibilities","title":"Copy delivery process responsibilities","text":""},{"location":"product-and-design/copy-delivery/#design","title":"Design","text":"<ul> <li>Collaborate with Product on copywriting.</li> <li>Draft, proof and ready the copy for review in Figma and Ditto.</li> <li>Ensure English language and Spanish language copy are edited according to client style guides when available.</li> <li>Ensure copy is synced between Figma, Ditto, and Crowdin.</li> <li>Engage with the translation agency, BabbleOn, to get Spanish translations ready for Engineering.</li> <li>Deliver production-ready copy, with Spanish translations, to Engineering at Design Hand-Off meeting via a synced Figma file in the main branch.</li> </ul>"},{"location":"product-and-design/copy-delivery/#product","title":"Product","text":"<ul> <li>Engage with product stakeholders to get the information necessary for copywriting.</li> <li>Collaborate with Design on copy writing.</li> <li>Help verify English and Spanish copy is ready for Engineering.</li> </ul>"},{"location":"product-and-design/copy-delivery/#engineering","title":"Engineering","text":"<ul> <li>Move copy from Figma, properly synced with Ditto, into code in <code>django.po</code> message files. Developer-specific instructions in the Django message files technical documentation.</li> <li>Ensure the messages accurately reflect Figma/Ditto.</li> </ul>"},{"location":"product-and-design/copy-delivery/#timeline","title":"Timeline","text":"<p>Design follows the sprint schedule set by Product and Engineering; however there is no standard number of sprints or time within a sprint dedicated to the copy process. Rather, the process timeline is determined by effort required.</p> <p>Generally, Design will conduct research in an effort to determine parameters for the copy and to shape a first draft. Those parameters are then approved and/or finalized by Product. After that, Design then does a UX writing pass and further shapes the copy. Copy is reviewed by Product and then reviewed by Engineering during Design Review.</p> <p>Engineering requests that the copy is finished and translated before the Hand-Off and before the next sprint starts (presumably the sprint the copy would be implemented in). Translating the copy takes about a week so it\u2019s important to plan the Design Review and Hand-Off accordingly.</p>"},{"location":"product-and-design/copy-delivery/#tools-used","title":"Tools used","text":""},{"location":"product-and-design/copy-delivery/#figma","title":"Figma","text":"<p>Figma is our primary design tool and is the source of truth for all design decisions, concepts, and directions for the Benefits app and all Cal-ITP sites. Compiler has Figma Organization which includes developer mode, version history, and branching\u2013a tool to explore new design directions.</p> <p>The development team prefers not to have admin or editor capabilities so as not to accidentally interfere with any designs. Handoff of design files occurs over the course of two meetings: a review of the designs, and then hand-off or a chance for developers to create GitHub issues while designers can weigh in and answer questions (aka \u201cissue fest\u201d). After these meetings, designs are marked Ready for Dev within Figma.</p> <p>The dev team and design largely collaborate on designs through Slack and comments directly in Figma. Design aims to address Figma comments as soon as possible or within one day.</p>"},{"location":"product-and-design/copy-delivery/#ditto","title":"Ditto","text":"<p>The human-readable version of the English and Spanish translation strings for the application are delivered to Product and Engineering by Design, and are managed in the Ditto application. Cal-ITP Benefits.</p> <p>Ditto is Compiler\u2019s copy management system for Benefits and the Cal-ITP sites. It syncs directly with Figma and uses many of the same conventions found in Figma, including components and variables (therefore, it is important to be specific when referring to a Ditto component or a Figma variable).</p> <p>The Benefits project within Ditto is fully synced with Figma. Product and Design may use either Figma or Ditto as their source of truth on copy, though it is recommended that Developers use Figma for all final English copy. Spanish copy can be found in Ditto. Compiler is considering using the GitHub integration that comes with Ditto, but has not formally integrated Ditto into their workflow as of yet.</p> <p>In the Benefits project, all of the text has been componentized. Agencies are represented in the text as variants on components. Languages are also represented in the text as variants. Currently Benefits has two languages: English and Spanish. English is the assumed default in the copy in Ditto, and Spanish is a variant. There are variants within Ditto that include both an agency and Spanish, such as MST-Spanish.</p>"},{"location":"product-and-design/copy-delivery/#crowdin","title":"Crowdin","text":"<p>Crowdin is our translation platform. We use BabbleOn to provide our translations. With very simple translations (or more complex if you are fluent or native in the language), Compiler team members can translate the strings of text directly in the Crowdin platform. For anything above our language skills, Design contacts Salim at BabbleOn and asks for the new files to be translated once the language files have been synced from Ditto to Crowdin.</p>"},{"location":"product-and-design/copy-style/","title":"Copy terms and style","text":"<p>Use the following terms and style rules for Benefits application English and Spanish copy. Refer to the Cal-ITP Editorial Style Guide and Language Matters: Cal-ITP Terminology for further guidance.</p>"},{"location":"product-and-design/copy-style/#terms","title":"Terms","text":"Use English Spanish Do not use Usage agency card agency card tarjeta de agencia Agency Card (don\u2019t capitalize both words) benefit option benefit option opci\u00f3n de beneficio Cal-ITP California Integrated Travel Project California Integrated Travel Project (Proyecto Integrado de Viaje de California, o Cal-ITP por sus siglas en ingl\u00e9s) Cal-ITP Benefits Cal-ITP Benefits Cal-ITP Benefits Do not translate Cal-ITP Benefits California Department of Transportation California Department of Transportation Departamento de Transporte de California California Department of Technology California Department of Technology Departamento de Tecnolog\u00eda de California connects connects conecta contactless card contactless card tarjeta sin contacto payment card, cashless, tap-to-pay, touchless enroll enroll inscribirse apply enrollment process enrollment process proceso de inscripci\u00f3n GitHub GitHub GitHub Github Littlepay Littlepay Littlepay LittlePay Older Adult Older Adult adultos mayores Senior public transportation public transportation transporte p\u00fablico reduced fare reduced fare tarifa reducida discounted Social Security number Social Security number n\u00famero de Seguro Social social security number state-issued ID card state-issued ID card tarjeta de identificaci\u00f3n emitida por el estado driver\u2019s license tap to ride tap to ride toque para viajar transit agency transit agency agencia de tr\u00e1nsito bus agency, light rail agency, transit authority Refer to Language Matters: Cal-ITP Terminology transit benefit transit benefit beneficio de tr\u00e1nsito discount, fare discounts, reduced-fare \u201cOlder adult transit benefit\u201d, \u201cVeteran transit benefit\u201d transit provider transit provider proveedor de transporte U.S. Veteran U.S. Veteran Veterano de EE. UU. US Veteran, US veteran Follows VA Content Style Guide verify verify verifique"},{"location":"product-and-design/copy-style/#style","title":"Style","text":"Rule Examples Capitalization Always sentence-case body text, headlines, questions on Help page. Unable to confirm eligibility | Cal-ITP Benefits In English, names of pages are capitalized. Return Home Previous Page In Spanish, names of pages are not capitalized. Volver al inicio P\u00e1gina anterior Refer to Cal-ITP Editorial Style Guide Images, illustrations Always write an alt tag, unless Design determines the visual is purely decorative and has no substantive meaning. Links Never link to \u201chere\u201d. Use a descriptive title for the page. Tense For Spanish, use usted/formal case for all copy. Numbers Refer to Cal-ITP Editorial Style Guide Spacing Refer to Cal-ITP Editorial Style Guide Punctuation Refer to Cal-ITP Editorial Style Guide"},{"location":"product-and-design/newsletter-archive/","title":"Benefits newsletter","text":"<p>We send a newsletter in the first half of each month to share product updates, adoption metrics, and news related to Cal-ITP Benefits. Below is an archive of all newsletters we\u2019ve shared organized by year and month.</p> <p>If you\u2019re interested in receiving this update delivered directly to your email inbox, subscribe here.</p>"},{"location":"product-and-design/newsletter-archive/#2025","title":"2025","text":"<ul> <li>The March Update</li> </ul> <ul> <li>The April Update</li> </ul> <ul> <li>The May Update</li> </ul> <ul> <li>The June Update</li> </ul> <ul> <li>The July Update</li> </ul> <ul> <li>The September Update</li> </ul> <ul> <li>The October Update</li> </ul>"},{"location":"product-and-design/newsletter-archive/#2024","title":"2024","text":"<ul> <li>The April Update</li> </ul> <ul> <li>The May Update</li> </ul> <ul> <li>The June Update</li> </ul> <ul> <li>The July Update</li> </ul> <ul> <li>The August Update</li> </ul> <ul> <li>The September Update</li> </ul> <ul> <li>The October Update</li> </ul> <ul> <li>The November Update</li> </ul> <ul> <li>The December Update</li> </ul>"},{"location":"product-and-design/use-cases/enrollment-use-cases/","title":"Enrollment use cases","text":"<p>The use cases documented on this page focus on how the system is supposed to work from the perspective of the end user.</p>"},{"location":"product-and-design/use-cases/enrollment-use-cases/#use-case-enroll-contactless-card-to-receive-transit-benefit","title":"Use case: Enroll contactless card to receive transit benefit","text":"<p>Primary Actor: Transit rider</p> <p>Systems: Benefits app, transit processor</p> <p>Preconditions:</p> <ul> <li>Transit rider has confirmed their eligibility with the Benefits app</li> <li>Transit rider has their contactless card information available</li> <li>Benefits app is able to contact the transit processor</li> </ul> <p>Trigger: Transit rider initiates the enrollment phase</p> <p>Basic flow:</p> <ol> <li>Transit rider enters their contactless card information</li> <li>Benefits app passes that information to the transit processor to enroll the card</li> <li>Transit processor successfully enrolls card</li> </ol> <p>Alternate flows:</p> <ul> <li> <p>3a. Transit processor returns with one of the following errors: card verification failed, token is invalid, or general server error</p> <ul> <li>3a1. Transit rider chooses to retry, starting back at initiating the enrollment phase</li> <li>3b1. Transit rider leaves the Benefits app</li> </ul> </li> </ul> <p>Postconditions:</p> <ul> <li>Transit rider\u2019s contactless card is enrolled to receive the transit benefit</li> </ul>"},{"location":"tests/automated-tests/","title":"Automated tests","text":""},{"location":"tests/automated-tests/#pytest","title":"Pytest","text":"<p>The tests done at a request/unit level are run via pytest-django.</p> <p>To run locally, start the Devcontainer and run:</p> <pre><code>tests/pytest/run.sh\n</code></pre> <p>The helper script:</p> <ol> <li>Runs the tests with <code>pytest</code></li> <li>Calculates test coverage with <code>coverage</code></li> <li>Generates a <code>coverage</code> report in HTML in the app\u2019s <code>static/</code> directory</li> </ol> <p>The report can be viewed by launching the app and navigating to <code>http://localhost:$DJANGO_LOCAL_PORT/static/coverage/index.html</code></p> <p>The report files include a local <code>.gitignore</code> file, so the entire directory is hidden from source control.</p>"},{"location":"tests/automated-tests/#latest-coverage-report","title":"Latest coverage report","text":"<p>We also make the latest (from <code>main</code>) coverage report available online here: Coverage report</p>"},{"location":"tests/automated-tests/#playwright","title":"Playwright","text":"<p>For testing the app flows from beginning to end, we use Playwright.</p> <p>To run all Playwright tests locally, open a terminal outside the devcontainer and run:</p> <pre><code>docker compose run --rm playwright\n</code></pre>"},{"location":"tests/automated-tests/#running-in-headed-mode","title":"Running in headed mode","text":"<p>To run Playwright in headed mode, you need to enable X11 forwarding.</p> <p>Some steps are required for macOS and Windows to check that you have an X Server.</p>"},{"location":"tests/automated-tests/#macos","title":"macOS","text":"<p>macOS doesn\u2019t provide a built-in X Server, so you\u2019ll need to install XQuartz which will provide one:</p> <ul> <li>Install XQuartz: <code>brew install --cask xquartz</code></li> <li>Open XQuartz, go to Preferences -&gt; Security, and check \u201cAllow connections from network clients\u201d</li> <li>Restart your computer (restarting XQuartz might not be enough)</li> <li>Start XQuartz with <code>xhost +localhost</code></li> </ul>"},{"location":"tests/automated-tests/#windows","title":"Windows","text":"<p>Windows provides an X Server as a part of Windows Subsystem for Linux (WSL).</p> <p>To verify that WSL and WSL GUI are installed and running:</p> <ul> <li>Launch WSL from the Start Menu</li> <li> <p>In the Linux terminal that opens, verify that the directory <code>/mnt/wslg</code> exists by running:</p> <pre><code>ls -a -w 1 /mnt/wslg\n</code></pre> <p>and that it contains these files:</p> <pre><code>.\n..\n.X11-unix\nPulseAudioRDPSink\nPulseAudioRDPSource\nPulseServer\ndistro\ndoc\ndumps\npulseaudio.log\nruntime-dir\nstderr.log\nversions.txt\nweston.log\nwlog.log\n</code></pre> </li> </ul> <p>If you don\u2019t see WSL in the Start Menu or the <code>ls</code> command fails, you need to install WSL.</p>"},{"location":"tests/automated-tests/#set-display-environment-variable","title":"Set <code>DISPLAY</code> environment variable","text":"<p>In your <code>.env</code> file, set <code>DISPLAY</code> to the value for your operating system:</p> <ul> <li>macOS: <code>host.docker.internal:0</code></li> <li>Linux: <code>$DISPLAY</code></li> <li>Windows: <code>:0</code></li> </ul> <p>For example, for macOS, you\u2019d add this line to your <code>.env</code> file:</p> <pre><code>DISPLAY=host.docker.internal:0\n</code></pre> <p>Info</p> <p>The steps above are adapted from https://www.oddbird.net/2022/11/30/headed-playwright-in-docker/.</p>"},{"location":"tests/automated-tests/#run-all-tests-in-headed-mode","title":"Run all tests in headed mode","text":"<p>In <code>tests/playwright/pytest.ini</code>, add <code>--headed</code> to <code>addopts</code>, and run all tests with the same command as before:</p> <pre><code>docker compose run --rm playwright\n</code></pre>"},{"location":"tests/automated-tests/#use-playwright-gui-tools","title":"Use Playwright GUI tools","text":"<p>Start a bash session inside the <code>playwright</code> container:</p> <pre><code>docker compose run --rm playwright /bin/bash\n</code></pre> <p>From here, you can use the <code>playwright</code> CLI and any of the GUI tools it provides. Run <code>playwright --help</code> to see different commands you can run.</p> <p>For example, to launch a Chrome window with a Playwright Inspector attached to it, run:</p> <pre><code>playwright cr\n</code></pre> <p></p>"},{"location":"tests/manual-tests/","title":"Manual tests","text":"<p>This page lists manual testing scripts for various flows.</p>"},{"location":"tests/manual-tests/#getting-started-using-test-credentials","title":"Getting started: Using test credentials","text":"<p>In order to fully test the app, you will need to use test credentials, which are available here: Benefits Test Data.</p> <p>Important: Please do not use your personal accounts for Login.gov, ID.me, etc. to complete your review.</p>"},{"location":"tests/manual-tests/#logingov-and-veteran-confirmation-api","title":"Login.gov and Veteran Confirmation API","text":"<p>To test the Login.gov (Older adult) and Veteran Confirmation API (Veteran) enrollment pathway flows, you will need an e-mail address, a real cell phone and test account <code>yml</code> files from the Benefits Test Data document.</p> <p>Read the Login.gov Testing identity proofing documentation for complete instructions. In summary, once you click Get started with Login.gov, follow these instructions:</p> <ol> <li>Before you get started, download the <code>proofing-senior.yml</code> (or any other <code>yml</code> file for the specific user you are testing) from the Benefits Test Data document. For example, if you are testing the Veteran flow, or a non-senior flow, download the <code>proofing-veteran.yml</code> or <code>proofing-nonsenior.yml</code> files respectively.</li> <li>Click Create an account.</li> <li>Create a test email address, like <code>yourname+older_adult@compiler.la</code>. Gmail supports adding suffixes to your email address.</li> <li>Select English (default) and check I read and accept the Login.gov Rules of Use.</li> <li>Check your email for a confirmation link and click it.</li> <li>Go through the password and authentication method setup flows. Make sure to select Text or voice message. Selecting Backup codes is useful if you plan to use this account again. Make sure to save your password, as you will need to enter it at the very end.</li> <li>Enter your real cell phone number.</li> <li>Check your text messages for a message from Login.gov. The message should specify <code>idp.int.identitysandbox.gov</code>.</li> <li>Enter the code into the browser.</li> <li>Save the backup codes, if selected.</li> <li>Click Continue until you reach the <code>How would you like to add your ID?</code> part of the flow.</li> <li>Click Upload photos.</li> <li>Upload the <code>.yml</code> files you downloaded in the first step for both the front and back of the ID. Click Continue.</li> <li>For Enter your Social Security number, enter a number that starts with <code>900</code> or <code>666</code>. DO NOT ENTER YOUR PERSONAL SOCIAL SECURITY NUMBER.</li> <li>At this point, the Verify your information page should show the data you have in the <code>.yml</code> file you uploaded. Double-check that the age (date of birth) is accurate.</li> <li>Verify your phone again.</li> <li>Re-enter your password. You should be redirected back to the Benefits application.</li> </ol>"},{"location":"tests/manual-tests/#agency-cards","title":"Agency cards","text":"<p>To test the agency card enrollment pathway, use the following test credentials:</p> <ul> <li>Courtesy Cards (MST)</li> <li>Reduced Fare Mobility ID (SBMTD)</li> </ul>"},{"location":"tests/manual-tests/#littlepay","title":"Littlepay","text":"<p>To test the Littlepay card enrollment flow, use the test Visa credentials in the Benefits Test Data document, along with any fake name, any CVV and an expiration date in the future.</p>"},{"location":"tests/manual-tests/#keyboard-testing","title":"Keyboard testing","text":"<p>Keyboard testing refers to test the app on a desktop/laptop machine without using a mouse/trackpad. To do so, use Tab to focus on a button or link, and Enter to select a button or link.</p> <p>Make sure:</p> <ul> <li>All links and buttons have a visible indication that the targeted item is focused.</li> <li>All modals close by pressing Escape.</li> <li>The skip nav, a link with the text <code>Skip to main content</code> / <code>Saltar al contenido principal</code> should appear on the first tab press.</li> </ul>"},{"location":"tests/manual-tests/#spanish-translation-testing","title":"Spanish translation testing","text":"<ol> <li>Open the test environment Benefits application in the test environment using a supported browser.</li> <li>Click the Espa\u00f1ol button on the right side of the application header, to switch the application language to Spanish.</li> <li>Click Elija su Proveedor and choose Monterey-Salinas Transit as your transit agency.</li> <li>Follow the Adulto mayor / Older adult enrollment pathway to completion using test data. You will need a cell phone, a test Login.gov account and test Littlepay card credentials.</li> <li>Follow the Veterano de EE. UU. / Veterans enrollment pathway to completion using test data. You will need a cell phone, a test Login.gov account and test Littlepay card credentials.</li> <li>Follow the Tarjeta de cortes\u00eda de MST / Courtesy Card pathway to completion using test data. You will need test Courtesy Card credentials and test Littlepay card credentials.</li> <li>Click Ayuda in the footer to review the Help page.</li> <li>Jot down any issues or notes during the review. Highlight any proposed changes on the forTranslation tab in the Cal-ITP Benefits Application Copy spreadsheet. Use the comment feature in Google Sheets to share your feedback. Please mention Andy Walker and Machiko Yasuda in each comment.</li> </ol>"}]}